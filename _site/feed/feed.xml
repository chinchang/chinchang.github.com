<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Kushagra Gour- Creativity freak!</title>
	<subtitle>Kushagra Gour- Creativity freak!</subtitle>
	<link href="https://kushagragour.in/feed/feed.xml" rel="self"/>
	<link href="http://kushagragour.in"/>
	<updated>2018-03-27T00:00:00+05:30</updated>
	<id>https://kushagragour.in/feed/feed.xml</id>
	<author>
		<name>Kushagra Gour</name>
	</author>
	
	<entry>
		<title>A CSS Approach to Trap Focus Inside of an Element</title>
		<link href="http://kushagragour.in/blog/2018/03/a-css-approach-to-trap-focus-inside-of-an-element/"/>
		<updated>2018-03-27T00:00:00+05:30</updated>
		<id>http://kushagragour.in/blog/2018/03/a-css-approach-to-trap-focus-inside-of-an-element/</id>
		<content type="html"></content>
	</entry>
	
	<entry>
		<title>Creating Vue.js Component Instances Programmatically</title>
		<link href="http://kushagragour.in/blog/2018/01/creating-vue-js-component-instances-programmatically/"/>
		<updated>2018-01-23T00:00:00+05:30</updated>
		<id>http://kushagragour.in/blog/2018/01/creating-vue-js-component-instances-programmatically/</id>
		<content type="html"></content>
	</entry>
	
	<entry>
		<title>How to write better CSS in teams with ACSS — A dynamic Atomic CSS library</title>
		<link href="http://kushagragour.in/blog/2018/01/acss-a-dynamic-atomic-css-library/"/>
		<updated>2018-01-04T00:00:00+05:30</updated>
		<id>http://kushagragour.in/blog/2018/01/acss-a-dynamic-atomic-css-library/</id>
		<content type="html"></content>
	</entry>
	
	<entry>
		<title>Overriding new tab page in Chrome extension, conditionally!</title>
		<link href="http://kushagragour.in/blog/2017/07/conditional-newtab-override-chrome-extension/"/>
		<updated>2017-07-26T00:00:00+05:30</updated>
		<id>http://kushagragour.in/blog/2017/07/conditional-newtab-override-chrome-extension/</id>
		<content type="html">&lt;p&gt;If you use Chrome extensions like Momentum, Panda etc you know that Chrome extensions have the ability to override your new tab pages i.e. the page you see when you open a new tab in the browser. They do this through the &lt;a href=&quot;https://developer.chrome.com/extensions/override&quot;&gt;&lt;em&gt;Override Pages&lt;/em&gt;&lt;/a&gt; API, by doing so in the manifest file:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;My extension&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;chrome_url_overrides&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;newtab&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;theNewPage.html&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Issue with such extensions is that you can use only one such extension, because if you have multiple extensions with each one trying to override the new tab page, only one of them can finally override. Also, these extensions don&#39;t provide any configurable setting to make the overriding of new tab optional. But, there is a very simple trick to make new tab overriding conditional which I use in &lt;a href=&quot;https://webmakerapp.com/&quot;&gt;Web Maker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, you don&#39;t do anything in the extension&#39;s manifest as mentioned above. Then you can have a background page that listens for a new tab creation event. Whenever a new tab is created and the new tab&#39;s URL is &lt;code&gt;chrome://newtab/&lt;/code&gt;, we can do our condition checking and replace the URL accordingly. Heres how you do that:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;chrome&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tabs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onCreated&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tab&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tab&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;chrome://newtab/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;shouldReplaceNewTabSetting &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      chrome&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tabs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tab&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        url&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; chrome&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;extension&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;theNewPage.html&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There you go - conditional new tab page replacement! You can also see the actual &lt;a href=&quot;https://github.com/chinchang/web-maker/blob/master/src/eventPage.js#L13&quot;&gt;code I use in Web Maker here&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Web Maker: Forking and Fonts</title>
		<link href="http://kushagragour.in/blog/2017/05/web-maker-fork-templates/"/>
		<updated>2017-05-31T00:00:00+05:30</updated>
		<id>http://kushagragour.in/blog/2017/05/web-maker-fork-templates/</id>
		<content type="html">&lt;p&gt;I recently released v2.7.0 of &lt;a href=&quot;https://webmakerapp.com/&quot;&gt;Web Maker&lt;/a&gt; with 2 super useful features - Forking &amp;amp; Customizable fonts. Here is a bit about them.&lt;/p&gt;
&lt;h2&gt;Forking&lt;/h2&gt;
&lt;p&gt;Forking basically allows you to create a duplicate of any of your existing creation. This sounds like a small feature, but its usefulness is enormous. Forking any creation gives you the power to define templates. Say, your creations are mostly based on &lt;code&gt;three.js&lt;/code&gt; and a &lt;code&gt;three.js&lt;/code&gt; work requires a bit of same starter code always. With Forking now in Web maker, you do this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new creation.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;three.js&lt;/code&gt; from &lt;em&gt;Add Library&lt;/em&gt; option.&lt;/li&gt;
&lt;li&gt;Add the required base code for creating a new &lt;code&gt;three.js&lt;/code&gt; work.&lt;/li&gt;
&lt;li&gt;Change your creation&#39;s title to: &lt;em&gt;Template: three.js starter&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thats it. Now you have created a readymade template for starting any &lt;code&gt;three.js&lt;/code&gt; work in future. How do you use it? Simply:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click on the &lt;em&gt;Open&lt;/em&gt; button.&lt;/li&gt;
&lt;li&gt;Type in &lt;code&gt;template&lt;/code&gt; to search across all saved templates (remember you named your template so).&lt;/li&gt;
&lt;li&gt;Hit the &lt;strong&gt;Fork&lt;/strong&gt; button on the the desired template. And done!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And all this user experience is completely accessible through just keyboard too!&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;http://kushagragour.in/images/2017/webmaker-fork.gif&quot; alt=&quot;Web Maker Fork&quot;&gt;
    &lt;caption&gt;Web Maker&#39;s Fork feature&lt;/caption&gt;
&lt;/figure&gt;
&lt;h2&gt;Fonts!&lt;/h2&gt;
&lt;p&gt;Customizable fonts are something that developers always dig. And with the new generation fonts with ligatures, it has become more exciting to use them. With this new release, you now get 4 awesome fonts with ligatures (except Inconsolata) - Fira Code (now default), FixedSys, Monoid and Inconsolata. Big thanks to the developers of these fonts! If you want to see some other font as well, let me know in comments or on &lt;a href=&quot;https://twitter.com/webmakerapp&quot;&gt;twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I personally like the game-y feel of the &lt;em&gt;FixedSys&lt;/em&gt; font. Now coding feels like playing a game :)&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;http://kushagragour.in/images/2017/webmaker-fixedsys.png&quot; alt=&quot;Web Maker FixedSys font&quot;&gt;
    &lt;caption&gt;FixedSys font in Web Maker&lt;/caption&gt;
&lt;/figure&gt;
&lt;p&gt;Hope it hear from you all about these new features. If you find them useful, tweet out your love to &lt;a href=&quot;https://twitter.com/webmakerapp&quot;&gt;@webmakerapp&lt;/a&gt;. Oh, by the way, Web Maker has a &lt;a href=&quot;https://gitter.im/web-maker-app/Lobby&quot;&gt;chat lobby on Gitter&lt;/a&gt;. Join there if you need any help or want to say Hi. Cheers!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Web Maker: Console is here!</title>
		<link href="http://kushagragour.in/blog/2017/05/web-maker-console-is-here/"/>
		<updated>2017-05-18T00:00:00+05:30</updated>
		<id>http://kushagragour.in/blog/2017/05/web-maker-console-is-here/</id>
		<content type="html">&lt;p&gt;I have an awesome news to share with all the &lt;a href=&quot;https://webmakerapp.com/&quot;&gt;Web Maker&lt;/a&gt; users out there. The most &lt;a href=&quot;https://github.com/chinchang/web-maker/issues/56&quot;&gt;requested feature&lt;/a&gt; has finally landed in version 2.6 - The &amp;quot;Console&amp;quot;. Yes, you heard it right, you now have an inbuilt Console right inside the Web Maker interface.&lt;/p&gt;
&lt;h2&gt;What exactly is a Console, you ask?&lt;/h2&gt;
&lt;p&gt;If you have developed for browsers, you have most probably used the developer console that every browser provides. Wherein you can see your logs, errors etc. The Console in Web Maker is a similar thing, though it might not be that advanced...yet. You can do most basic things you do in the browser&#39;s developer console, without actually opening it! This is how it looks:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;http://kushagragour.in/images/webmaker-console.gif&quot; alt=&quot;Web Maker Console&quot;&gt;
    &lt;caption&gt;Web Maker&#39;s inbuilt Console&lt;/caption&gt;
&lt;/figure&gt;
&lt;h2&gt;How is a Console useful?&lt;/h2&gt;
&lt;p&gt;Having a Console right there, makes your much more productive and efficient in multiple ways. First of all, you won&#39;t have to open the browser&#39;s developer console in most cases...we all know how it can be slow at times.&lt;/p&gt;
&lt;p&gt;You often use various log functions in your code, like &lt;code&gt;console.log&lt;/code&gt;, &lt;code&gt;console.error&lt;/code&gt; etc. All these logs show up in the inbuilt Console. Moreover, if there is any runtime error in your JavaScript code, it would show up too in the Console, thus making your debugging very quick and easy.&lt;/p&gt;
&lt;p&gt;Apart from this, you can also evaluate any custom JavaScript code in your preview&#39;s context right from the Console. Just type it in the console input and press Enter.&lt;/p&gt;
&lt;p&gt;I had real fun developing Console into Web Maker. Hope it makes you more productive. If you loved this new feature, tweet out your love to &lt;a href=&quot;https://twitter.com/webmakerapp&quot;&gt;@webmakerapp&lt;/a&gt;. Cheers!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Web Maker, an Offline, Browser-based CodePen Alternative</title>
		<link href="http://kushagragour.in/blog/2017/02/web-maker-offline-web-playground/"/>
		<updated>2017-02-15T00:00:00+05:30</updated>
		<id>http://kushagragour.in/blog/2017/02/web-maker-offline-web-playground/</id>
		<content type="html"></content>
	</entry>
	
	<entry>
		<title>Web Maker: Preventing Infinite Loops</title>
		<link href="http://kushagragour.in/blog/2017/02/web-maker-infinite-loop-prevention/"/>
		<updated>2017-02-10T00:00:00+05:30</updated>
		<id>http://kushagragour.in/blog/2017/02/web-maker-infinite-loop-prevention/</id>
		<content type="html">&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;When you write JavaScript in &lt;a href=&quot;https://kushagragour.in/lab/web-maker&quot;&gt;Web Maker&lt;/a&gt;, it renders that JavaScript inside the preview window in realtime. What this means is in case you using any loop structure in your code, there will probably be a point when you mid way defining your loop variables, conditions, variant etc. And at that point if Web Maker renders your JavaScript, it would result in an infinite loop. Lets see with an example. Suppose I want to write a for loop to iterate 10 times, I&#39;ll start with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
for (var i = 0; i&lt;10; [cursor_here])=&quot;&quot; {=&quot;&quot; }=&quot;&quot; &lt;=&quot;&quot; code=&quot;&quot;&gt;&lt;/10;&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that my cursor would be where it says &lt;code&gt;[cursor_here]&lt;/code&gt; and I am still defining my loop and going to write &lt;code&gt;i++&lt;/code&gt; there. But as we render in realtime, this incomplete code would get executed in preview, resulting in an infinite loop.&lt;/p&gt;
&lt;p&gt;Therefore we need a way to prevent such intermediate incomplete loops from running infinitely and choking the browser.&lt;/p&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;There is a &lt;a href=&quot;http://mca.nowgray.com/2017/01/can-runtime-environment-detect-infinite.html&quot;&gt;lot of discussion on the Web&lt;/a&gt; regarding how difficult it is to detect an infinite loop in runtime, simply because any runtime cannot actually diffrentiate between a normal loop and one that is going to run infinitely. There are some analyzers that try to solve this issue but static analysis can only do so much.&lt;/p&gt;
&lt;p&gt;The approach Web Maker takes to solve this is by keeping a check on the time spent inside a loop. To be specific, I check if the loop isn&#39;t taking more than 1 second. Otherwise its marked as an infinite loop. To be able to keep track of this time, we need to have a time check inside the loop and hence this requires changing the actual loop code, also called as &lt;a href=&quot;https://en.wikipedia.org/wiki/Instrumentation_(computer_programming)&quot;&gt;Code Instrumentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So if we have a code like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
for ( var i = 0; i &lt; 10;) {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After our instrumentation, it should change to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
var startTime = Date.now();
for ( var i = 0; i &lt; 10;) {
	if (Date.now() - startTime &gt; 1000) { break; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To analyze a piece of code, we need a JavaScript parser. I used &lt;a href=&quot;http://esprima.org/&quot;&gt;Esprima&lt;/a&gt; for that. Lets see how we can use Esprima to instrument our code.&lt;/p&gt;
&lt;h3&gt;Detecting a loop&lt;/h3&gt;
&lt;p&gt;Esprima converts a string of JavaScript code into an &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;Abstract Syntax Tree&lt;/a&gt; (AST), which is basically a tree like structure representing the code snippet.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
function instrumentCode(code) {
	var ast = esprima.parse(code);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To get a sense of what an AST looks like, lets run esprima on the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
var foo = 3;
for (var i = 0; i &lt; 10; i++) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is what we&#39;ll get:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;http://kushagragour.in/images/ast.png&quot; alt=&quot;Esprima Abstract Syntax Tree&quot;&gt;
    &lt;caption&gt;Esprima&#39;s Abstract Syntax Tree&lt;/caption&gt;
&lt;/figure&gt;
&lt;p&gt;Notice how the return AST is a repeating nested array structure (&lt;code&gt;body&lt;/code&gt; inside &lt;code&gt;body&lt;/code&gt;), with each identifiable unit as an instance of some class. Eg. &lt;code&gt;VariableDeclaration&lt;/code&gt;, &lt;code&gt;ForStatement&lt;/code&gt; etc. This is something we can easily traverse using recursion, like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
function processAst(ast) {
	var currentElement;
	// If this ins&#39;t actual body, recurse with the body
	if (!Array.isArray(astBody)) {
		processAst(astBody.body);
		return;
	}
    // Traverse the body
    for (var i = ast.length; i--;) {
    	var currentElement = ast[i];

        // Process `currentElement` here

        // Recurse on inner body
        if (currentElement.body) {
            processAst(currentElement.body);
        }
    }
}
function instrumentCode(code) {
	var ast = esprima.parse(code);
    processAst(ast);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the above code in place, we&#39;ll keep getting different syntax structures in &lt;code&gt;currentElement&lt;/code&gt;. Next, we check them and inject the actual loop protection code.&lt;/p&gt;
&lt;h3&gt;Injecting the loop protection checks&lt;/h3&gt;
&lt;p&gt;We are concerned when &lt;code&gt;currentElement&lt;/code&gt; is a &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;do-while&lt;/code&gt; loop. This can be checked by simply testing &lt;code&gt;currentElement.type&lt;/code&gt;. Lets add that.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
function processAst(ast) {
	var currentElement;
	// If this ins&#39;t actual body, recurse with the body
	if (!Array.isArray(astBody)) {
		processAst(astBody.body);
		return;
	}
    // Traverse the body
    for (var i = ast.length; i--;) {
    	var currentElement = ast[i];

        if (currentElement &amp;&amp;
        	currentElement.type === &#39;ForStatement&#39; ||
            currentElement.type === &#39;WhileStatement&#39; ||
            currentElement.type === &#39;DoWhileStatement&#39;) {
            // We got a loop!
        }
        // Recurse on inner body
        if (currentElement.body) {
        	processAst(currentElement.body);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we need two of our statements to be injected in AST syntax. For that we can again use esprima. Once we covert the statements into AST objects, its just a matter of adding them to the right &lt;code&gt;body&lt;/code&gt; in our AST.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
if (currentElement &amp;&amp;
    currentElement.type === &#39;ForStatement&#39; ||
    currentElement.type === &#39;WhileStatement&#39; ||
    currentElement.type === &#39;DoWhileStatement&#39;) {

    var ast1 = esprima.parse(&#39;var myvar = Date.now();&#39;);
    var ast2 = esprima.parse(&#39;while(a){if (Date.now() - myvar &gt; 1000) { break;}}&#39;);
    var insertionBlocks = {
        before: ast1.body[0],
        inside: ast2.body[0].body.body[0]
    };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice, that we have assigned the current time in &lt;code&gt;myVar&lt;/code&gt;. Now there could be multiple loops (even nested) in a single code snippet and they all need to be handled with their unique variables. So we replace the variable names in our insertion blocks with a 3 digit random string:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
if (currentElement &amp;&amp;
    currentElement.type === &#39;ForStatement&#39; ||
    currentElement.type === &#39;WhileStatement&#39; ||
    currentElement.type === &#39;DoWhileStatement&#39;) {

    var ast1 = esprima.parse(&#39;var myvar = Date.now();&#39;);
    var ast2 = esprima.parse(&#39;while(a){if (Date.now() - myvar &gt; 1000) { break;}}&#39;);
    var insertionBlocks = {
        before: ast1.body[0],
        inside: ast2.body[0].body.body[0]
    };
    randomVariableName = &#39;_&#39; + generateRandomId(3);
    insertionBLocks.before.declarations[0].id.name = insertionBLocks.inside.test.left.right.name = randomVariableName;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All that is left now is to insert the insertion blocks at right places:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
if (currentElement &amp;&amp;
    currentElement.type === &#39;ForStatement&#39; ||
    currentElement.type === &#39;WhileStatement&#39; ||
    currentElement.type === &#39;DoWhileStatement&#39;) {

    var ast1 = esprima.parse(&#39;var myvar = Date.now();&#39;);
    var ast2 = esprima.parse(&#39;while(a){if (Date.now() - myvar &gt; 1000) { break;}}&#39;);
    var insertionBlocks = {
        before: ast1.body[0],
        inside: ast2.body[0].body.body[0]
    };
    randomVariableName = &#39;_&#39; + generateRandomId(3);
    insertionBLocks.before.declarations[0].id.name = insertionBLocks.inside.test.left.right.name = randomVariableName;

    // Insert time variable assignment as first child in the body array.
    ast.splice(i, 0, insertionBLocks.before);

    // If the loop&#39;s body is a single statement, then convert it into a block statement
    // so that we can insert our conditional break inside it.
    if (!Array.isArray(el.body)) {
    	currentElement.body = {
        	body: [ el.body ],
        	type: &#39;BlockStatement&#39;
      	};
    }

    // Insert the `If` Statement check
    currentElement.body.body.unshift(insertionBLocks.inside);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we are done.&lt;/p&gt;
&lt;p&gt;You can also see the actual Web Maker &lt;a href=&quot;https://github.com/chinchang/web-maker/blob/master/src/utils.js&quot;&gt;source code for this logic&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>HTML5 mode without server-side code</title>
		<link href="http://kushagragour.in/blog/2016/07/html5mode-without-server/"/>
		<updated>2016-07-09T00:00:00+05:30</updated>
		<id>http://kushagragour.in/blog/2016/07/html5mode-without-server/</id>
		<content type="html">&lt;h2&gt;Issue&lt;/h2&gt;
&lt;p&gt;If you ever worked on a Single Page App (SPA), you would know that the URLs in the app either work using hash(#) or without hash - also called as &lt;em&gt;HTML5 mode&lt;/em&gt; in most frameworks. For &lt;em&gt;HTML5 mode&lt;/em&gt; to work though, you need to write server-side rewrite code to always serve &lt;code&gt;index.html&lt;/code&gt; for every page requested.&lt;/p&gt;
&lt;p&gt;Eg. &lt;code&gt;www.yourapp.com/product/13&lt;/code&gt; or &lt;code&gt;www.yourapp.com/user/setting&lt;/code&gt; should all respond with &lt;code&gt;index.html&lt;/code&gt; because in SPAs, there are no separate html files that can directly/independently render in the browser, except &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But what if you could get the HTML5 mode working without any server-side code?&lt;/p&gt;
&lt;h2&gt;The Trick&lt;/h2&gt;
&lt;p&gt;I read this trick on &lt;a href=&quot;https://coderwall.com/p/kfomwa/angularjs-html5mode-on-github-pages&quot;&gt;Coderwall&lt;/a&gt; sometime back and decided to give it a shot. The trick is simple, if you do not have proper rewrite rules on the server, requesting a URL like &lt;code&gt;www.yourapp.com/user/13&lt;/code&gt; would try fetching a resource on the path &lt;code&gt;user/13/&lt;/code&gt;, which isn&#39;t actually present. So your app would send in a &lt;code&gt;404.html&lt;/code&gt; in this case. But we want it to respond with index.html. What if we make &lt;code&gt;404.html&lt;/code&gt; same as &lt;code&gt;index.html&lt;/code&gt;?? 😎&lt;/p&gt;
&lt;p&gt;For this demo, I have implemented a basic SPA using &lt;a href=&quot;http://vuejs.org/&quot;&gt;Vue.js&lt;/a&gt; as the JavaScript framework and deployed it on Github pages.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://kushagragour.in/vuejs-html5mode&quot; class=&quot;button&quot;&gt;Demo&lt;/a&gt;
&lt;a href=&quot;https://github.com/chinchang/vuejs-html5mode&quot; class=&quot;button&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The main thing to notice there is if you refresh the app on a path other than &lt;code&gt;https://kushagragour.in/vuejs-html5mode/&lt;/code&gt;, you would see a 404 in the network panel.&lt;/p&gt;
&lt;h2&gt;Things to keep in mind&lt;/h2&gt;
&lt;p&gt;First, you would have a 404 from the server when a user lands on any path other than the root. No big deal, just that there would be a red entry in the network panel.&lt;/p&gt;
&lt;p&gt;Second, and more importantly, you are using your 404 page to make an &lt;code&gt;index.html&lt;/code&gt; clone. That means that you no more have a real 404 page to show to your users. One way I think of to fix this is by having a script in &lt;code&gt;404.html&lt;/code&gt; that validates the current URL for valid URL and if its not, renders the 404 stuff instead of usual &lt;code&gt;index.html&lt;/code&gt; contents.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Using background color in currentColor</title>
		<link href="http://kushagragour.in/blog/2016/01/backgroundcolor-in-currentcolor/"/>
		<updated>2016-01-31T00:00:00+05:30</updated>
		<id>http://kushagragour.in/blog/2016/01/backgroundcolor-in-currentcolor/</id>
		<content type="html">&lt;p&gt;I had the following situation recently - I have a container with some background color and it needs to have an arrow coming out from inside of the same background color. I implemented the arrow using &lt;code&gt;:after&lt;/code&gt; pseudo element. Something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kushagragour.in/images/2016/currentcolor-propagation.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;
.container {
  display: inline-block;
  padding: 30px;
  background-color: indianred;
  position: relative;
}

/* Arrow */
.container:after {
  content: &#39;&#39;;
  display: block;
  position: absolute;
  left: 100%;
  top: calc(50% - 10px);
  border: 10px solid transparent;
  border-left-color: indianred;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now this code works, but the container could be multi-colored and also the arrow can show either right or left for any container. With above implementation, for each different container, we&#39;ll have to change the border color as well like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;
/* Modifier for a container having left arrow */
.container--inverted:after {
  left: auto;
  right: 100%;
  border-left-color: transparent !important;
}

/* New container */
.container--2 {
  background-color: skyblue;
}

/* Arrow */
.container--2:after {
  border-left-color: skyblue;
}
.container--2.container--inverted:after {
  border-right-color: skyblue;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Bad Demo:&lt;/strong&gt;&lt;/p&gt;
&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;rxKrag&quot; data-default-tab=&quot;result&quot; data-user=&quot;chinchang&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/chinchang/pen/rxKrag/&quot;&gt;BjVPNJ&lt;/a&gt; by Kushagra Gour (&lt;a href=&quot;http://codepen.io/chinchang&quot;&gt;@chinchang&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;http://assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h3&gt;Issues&lt;/h3&gt;
&lt;p&gt;This code has 2 visible issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Not DRY&lt;/strong&gt; - Every new container has to define the color of its arrow by specifying the border color and that too 2 times, one for left and right each. So in total we&#39;ll need to write a single color value 3 times for every container...too much repeatition.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Coupling&lt;/strong&gt; - The container styling needs to be aware of the arrow implementation, whether its using border trick or something else. Changing the arrow implementation in future will require changing it for every container.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;One thing that might come to your mind to prevent these issues is &lt;code&gt;currentColor&lt;/code&gt;. Close enough, just that &lt;code&gt;currentColor&lt;/code&gt; refers to the &lt;code&gt;color&lt;/code&gt; property and not &lt;code&gt;background-color&lt;/code&gt;. Bummer!&lt;/p&gt;
&lt;p&gt;To overcome this limitation I came up with a trick I call &lt;code&gt;currentColor propagation&lt;/code&gt; :) The trick is basically to propagate &lt;code&gt;background-color&lt;/code&gt; to &lt;code&gt;color&lt;/code&gt; property of the arrow and then use &lt;code&gt;currentColor&lt;/code&gt; for coloring arrows! That solves both our issues:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;
.container {
	/* Other styles here */
	background-color: indianred;
}
.container:after {
	/* Other styles here */
	color: indianred;
	border-left-color: currentColor;
}
.container--inverted:after {
	border-left-color: transparent;
	border-right-color: currentColor;
}

/* Modifiers can just be like so */
.container--2 {
  background-color: skyblue;
}
/* Arrow */
.container--2:after {
  color: skyblue;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes, we need still need to mention color 2 times for each new container, but still better than 3 times. More importantly, all the arrow related code is just at one place and not duplicated for each container. Plus we don&#39;t have to use that dirty &lt;code&gt;!important&lt;/code&gt; and have much less code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Improved Demo:&lt;/strong&gt;&lt;/p&gt;
&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;BjVPNJ&quot; data-default-tab=&quot;result&quot; data-user=&quot;chinchang&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/chinchang/pen/BjVPNJ/&quot;&gt;BjVPNJ&lt;/a&gt; by Kushagra Gour (&lt;a href=&quot;http://codepen.io/chinchang&quot;&gt;@chinchang&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;http://assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Thats it for this article. Hope it will help you sometime :)&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>2015 - Year in review</title>
		<link href="http://kushagragour.in/blog/2015/12/2015-year-in-review/"/>
		<updated>2015-12-31T00:00:00+05:30</updated>
		<id>http://kushagragour.in/blog/2015/12/2015-year-in-review/</id>
		<content type="html">&lt;p&gt;Another year passed and its review time :) But this time instead of reviewing the year month wise, I&#39;ll do it in few categories.&lt;/p&gt;
&lt;h2&gt;Tech&lt;/h2&gt;
&lt;p&gt;This has to be the first category for review as this is what I love to do the most.&lt;/p&gt;
&lt;figure&gt;
	&lt;h3&gt;Perfaudit&lt;/h3&gt;
	&lt;img src=&quot;http://kushagragour.in/images/2015/perfaudit.png&quot; alt=&quot;&quot;&gt;
	&lt;figcaption&gt;&lt;a href=&quot;https://perfaudit.com/&quot;&gt;PerfAudit&lt;/a&gt; was this year&#39;s first side project that I did with my colleague &lt;a href=&quot;https://twitter.com/Apoorv_Saxena&quot;&gt;Apoorv&lt;/a&gt;. We did case-studies for some awesome websites, helped people make their sites faster and got lot of appreciation. It was fun.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
	&lt;h3&gt;cta.js&lt;/h3&gt;
	&lt;img src=&quot;http://kushagragour.in/images/2015/ctajs.png&quot; alt=&quot;&quot;&gt;
	&lt;figcaption&gt;&lt;a href=&quot;http://kushagragour.in/lab/ctajs/&quot;&gt;Cta.js&lt;/a&gt; is a JS library I wrote inspired from &lt;a href=&quot;https://twitter.com/aerotwist&quot;&gt;Paul Lewis&#39;&lt;/a&gt; technique to performantly transition DOM elements.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
	&lt;h3&gt;konsole.table, super-search &amp; screenlog.js&lt;/h3&gt;
	&lt;figcaption&gt;
	3 more JS shorties I did. &lt;a href=&quot;https://www.npmjs.com/package/konsole.table&quot;&gt;konsole.table&lt;/a&gt; was my first npm module which provides `console.table` in node environment. And &lt;a href=&quot;https://github.com/chinchang/super-search&quot;&gt;super-search&lt;/a&gt; is a JS library to enable search feature in any blog/website having an RSS feed.
	&lt;br&gt;
	&lt;a href=&quot;https://github.com/chinchang/screenlog.js&quot;&gt;screenlog.js&lt;/a&gt; makes it possible to use `console` statements without opening the console in your browser.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
	&lt;h3&gt;Prototyp&lt;/h3&gt;
	&lt;img src=&quot;http://kushagragour.in/images/2015/prototyp.png&quot; alt=&quot;&quot;&gt;
	&lt;figcaption&gt;Then I did one of my most &quot;useful&quot; app of the year :P I had started playing with Framer.js and was really impressed with what one can do with it very easily. But the editor for it is paid and just available for mac. So I decided to build a web app over Framer.js which is free and works across platforms.
	&lt;br&gt;
	I would say this is by far the closest I have come to creating a product :) Hope to make it more usable in coming time
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
	&lt;h3&gt;Kalu&lt;/h3&gt;
	&lt;figcaption&gt;
	&lt;a href=&quot;http://kushagragour.in/lab/kalu/&quot;&gt;Kalu&lt;/a&gt; was a calculator concept I implemented using codemirror editor. It aims at making long inter-linked calculation easy.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
	&lt;h3&gt;Word Blast Game&lt;/h3&gt;
	&lt;img src=&quot;http://kushagragour.in/images/2015/wordblast.jpg&quot; alt=&quot;&quot;&gt;
	&lt;figcaption&gt;The &lt;a href=&quot;http://js13kgames.com/entries/word-blast&quot;&gt;only game&lt;/a&gt; I did this year was for JS13KGames compo. Wanted to make more games though.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
	&lt;h3&gt;lollipop.css&lt;/h3&gt;
	&lt;img src=&quot;http://kushagragour.in/images/2015/lollipopcss.png&quot; alt=&quot;&quot;&gt;
	&lt;figcaption&gt;&lt;a href=&quot;http://kushagragour.in/lab/lollipop.css/&quot;&gt;A self-learning experiment&lt;/a&gt; to implement Android Lollipop animations in pure CSS.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
	&lt;h3&gt;&lt;a href=&quot;http://kushagragour.in/code-blast-codemirror/demo/index.html&quot;&gt;Code Blast plugin for Codemirror&lt;/a&gt;&lt;/h3&gt;
	&lt;video src=&quot;http://kushagragour.in/images/2015/codeblast.mp4&quot; autoplay=&quot;&quot; loop=&quot;&quot; alt=&quot;&quot;&gt;&lt;/video&gt;
	&lt;figcaption&gt;A hack trigerred by someone&#39;s &lt;a href=&quot;https://twitter.com/JoelBesada/status/670343885655293952&quot;&gt;hack&lt;/a&gt;. Too much of fun :P&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;Art&lt;/h2&gt;
&lt;figure&gt;
	&lt;h3&gt;INKtober&lt;/h3&gt;
	&lt;img src=&quot;http://kushagragour.in/images/2015/inktober.jpg&quot; alt=&quot;&quot;&gt;
	&lt;figcaption&gt;
	INKtober is a challenge where people draw something on every day of October. This was my first and although I couldn&#39;t draw all 31 days, I managed to pull off quite a few and had a very happy time doing it. Heres a summary of it but checkout all of them on my &lt;a href=&quot;http://draw.kushagragour.in/tagged/inktober&quot;&gt;art blog&lt;/a&gt;.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
	&lt;h3&gt;Bematlab&lt;/h3&gt;
	&lt;img src=&quot;http://kushagragour.in/images/2015/bematlab.jpg&quot; alt=&quot;&quot;&gt;
	&lt;figcaption&gt;
	I started &lt;a href=&quot;https://www.facebook.com/bematlab&quot;&gt;Bematlab&lt;/a&gt; last year and this year I added content whenever I got time and ideas. Drawing is fun! Ideas are rare! Heres one of my favourite from this year.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;Music&lt;/h2&gt;
&lt;p&gt;Not much here. I practiced beatboxing and playing flute occasionally. Also released a small &lt;a href=&quot;https://soundcloud.com/kushagra-gour/resham-firiri-bansuri-n-beatbox&quot;&gt;beatbox+flute piece&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Sports&lt;/h2&gt;
&lt;figure&gt;
	&lt;h3&gt;Football with office pals&lt;/h3&gt;
	&lt;figcaption&gt;
	We made an unofficial WingifyFC at Wingify :) We have started playing on Sat/Sun, then shifted to Wed/Fridays, then just fridays and then stopped in the end :P We&#39;ll definitely start it again and also have a tournament coming up this January :)
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
	&lt;h3&gt;Won TT doubles tournament&lt;/h3&gt;
	&lt;img src=&quot;http://kushagragour.in/images/2015/tt.png&quot; alt=&quot;&quot; height=&quot;300&quot;&gt;
	&lt;figcaption&gt;
	A TT double tournament was organized at Wingify. I and &lt;a href=&quot;https://twitter.com/s0ftvar&quot;&gt;Varun&lt;/a&gt; won that :)
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
	&lt;h3&gt;Marathon&lt;/h3&gt;
	&lt;img src=&quot;http://kushagragour.in/images/2015/marathon.jpg&quot; alt=&quot;&quot;&gt;
	&lt;figcaption&gt;
		I ran a 7KM marathon...in Leh, Ladakh with my friend Manpreet :)
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;Conferences&lt;/h2&gt;
&lt;p&gt;Attended MetaRefresh conference in Bangalore where we (wingify) were a sponsor and Apoorv gave a talk. It was all fine until...there was a Karnataka-bandh and we had to stay for hours on Bangalore airport :(&lt;/p&gt;
&lt;h2&gt;Travel&lt;/h2&gt;
&lt;figure&gt;
	&lt;h3&gt;Chamba, Himachal&lt;/h3&gt;
	&lt;img src=&quot;http://kushagragour.in/images/2015/chamba.jpg&quot; alt=&quot;&quot;&gt;
	&lt;figcaption&gt;
		An awesome trip to Chamba/Khajjiar/Dalhousie with Kamal, Ajay, Hariom and Gillz (Vivek). First time in Himachal :) &lt;a href=&quot;http://travel.kushagragour.in/tagged/chamba&quot;&gt;More pics&lt;/a&gt;.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
	&lt;h3&gt;Kasol, Himachal&lt;/h3&gt;
	&lt;img src=&quot;http://kushagragour.in/images/2015/kasol.png&quot; alt=&quot;&quot;&gt;
	&lt;figcaption&gt;
		Full Wingify Engineering team outing.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
	&lt;h3&gt;Leh, Ladakh&lt;/h3&gt;
	&lt;img src=&quot;http://kushagragour.in/images/2015/ladakh1.jpg&quot; alt=&quot;&quot;&gt;
	&lt;img src=&quot;http://kushagragour.in/images/2015/ladakh2.jpg&quot; alt=&quot;&quot;&gt;
	&lt;figcaption&gt;
		No words to speak about this trip. Beautiful mountains, clean roads and absolute silence. You have to be there to experience it. And I must say, the food is just top class in Leh! &lt;a href=&quot;http://travel.kushagragour.in/tagged/ladakh&quot;&gt;More pics&lt;/a&gt;.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
	&lt;h3&gt;Jim Corbett, Uttarakhand&lt;/h3&gt;
	&lt;img src=&quot;http://kushagragour.in/images/2015/corbett1.jpg&quot; alt=&quot;&quot;&gt;
	&lt;figcaption&gt;
		Full Wingify Engineering team outing, again :) We saw no tiger, infact no animal. Just chilled at the resort. We are playing mafia in above still.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
	&lt;h3&gt;Laangkawi, Malaysia&lt;/h3&gt;
	&lt;img src=&quot;http://kushagragour.in/images/2015/malaysia1.jpg&quot; alt=&quot;&quot;&gt;
	&lt;img src=&quot;http://kushagragour.in/images/2015/malaysia2.jpg&quot; alt=&quot;&quot;&gt;
	&lt;figcaption&gt;
		Wingify&#39;s year end trip with 100+ people :) It was amazing to see 100+ wingifians fill up the complete airport, plane, then the resort, beaches! Did para-sailing for first time. Last trip of year, absolute fun.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;Work&lt;/h2&gt;
&lt;figure&gt;
	&lt;h3&gt;First time campus recruitment&lt;/h3&gt;
	&lt;img src=&quot;http://kushagragour.in/images/2015/dce1.png&quot; alt=&quot;&quot;&gt;
	&lt;img src=&quot;http://kushagragour.in/images/2015/dce2.png&quot; alt=&quot;&quot;&gt;
	&lt;figcaption&gt;
		After 4 years out of college, I was in a campus (DTU) for recruiting engineers. Good first time experience :P
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3&gt;Focusing on DX along with UX&lt;/h3&gt;
&lt;p&gt;This year I shifted my partial focus from User experience (UX) to Developer experience (DX, self-invented term). DX means I work towards making life of developers easy in every aspect, whether its writing code or releasing it. That involves things like automating stuff and is a refreshing change for me.&lt;/p&gt;
&lt;h3&gt;BSP&lt;/h3&gt;
&lt;p&gt;We organized our first Bug squashing party at office. Quite a success I would say.&lt;/p&gt;
&lt;h3&gt;New office&lt;/h3&gt;
&lt;p&gt;Our product team at Wingify moved to a new office. New environment, new vibes, less distraction.&lt;/p&gt;
&lt;h3&gt;Hackathon&lt;/h3&gt;
&lt;p&gt;I made an app called &lt;a href=&quot;http://chennainerd.2015.nodeknockout.com/&quot;&gt;&lt;strong&gt;Gamjeong&lt;/strong&gt;&lt;/a&gt; along with &lt;a href=&quot;https://twitter.com/dheerajhere&quot;&gt;Dheeraj&lt;/a&gt; at a hackathon we had at Wingify. It send you push notifications for tweets that match the keyword and sentiment you say.&lt;/p&gt;
&lt;h2&gt;Misc&lt;/h2&gt;
&lt;figure&gt;
	&lt;h3&gt;Rubiks Cube&lt;/h3&gt;
	&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/hVr-DeIR7TY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
	&lt;figcaption&gt;
		Beginning this year, I started solving rubiks cube. Apart from getting down from 5 minutes/solve to 50 seconds/solve, best thing was perseverance. I kept practicing it the whole year...probably because its too handly and I keep playing with it in buses, trains, boring weddings and where not :)
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
	&lt;h3&gt;Started Cardistry&lt;/h3&gt;
	&lt;img src=&quot;http://kushagragour.in/images/2015/cardistry.jpg&quot;&gt;
	&lt;figcaption&gt;
		A month back I also started &lt;a href=&quot;http://www.theory11.com/media/4545-what-is-cardistry&quot;&gt;Cardistry&lt;/a&gt; and some basic sleight of hands tricks with cards. Its very interesting and exciting. Will post my first video on cardistry soon :)
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
	&lt;h3&gt;New Car&lt;/h3&gt;
	&lt;img src=&quot;http://kushagragour.in/images/2015/ciaz.jpg&quot;&gt;
	&lt;figcaption&gt;
		Got a new car for my Dad :)
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
	&lt;h3&gt;More gaming&lt;/h3&gt;
	&lt;figcaption&gt;
		Bought a PS3 and have started playing games again after a long gap. Good to be back!
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;I created a lot of open source stuff, travelled a lot (by my standards). As far as art and music is concerned, I wanted to do more.&lt;/p&gt;
&lt;h3&gt;For 2016 (in no order)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Create and release more amazing stuff, as usual. More on product side instead of small libraries.&lt;/li&gt;
&lt;li&gt;Draw more often&lt;/li&gt;
&lt;li&gt;Release some music pieces&lt;/li&gt;
&lt;li&gt;Start a tech podcast&lt;/li&gt;
&lt;li&gt;Travel to more places&lt;/li&gt;
&lt;li&gt;Work towards making someone&#39;s life better&lt;/li&gt;
&lt;li&gt;Help bro with &lt;a href=&quot;http://prakritee.com/&quot;&gt;Prakriti&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Adding search in your jekyll blog</title>
		<link href="http://kushagragour.in/blog/2015/06/search-in-jekyll-blog/"/>
		<updated>2015-06-08T00:00:00+05:30</updated>
		<id>http://kushagragour.in/blog/2015/06/search-in-jekyll-blog/</id>
		<content type="html">&lt;p&gt;I recently implemented search on this website (made in Jekyll). Its a complete client-side search and hence very quick and easy to use. To try it out, press the &#39;/&#39; or ESC key and type something.&lt;/p&gt;
&lt;p&gt;There are not too many articles out there on implementing a functional post search on a Jekyll blog, so I thought of writing about it. The following method described works over your blog&#39;s RSS feeds. So make sure you have your RSS feed URL ready. If you have a jekyll/octopress blog, chances are you already have a &lt;code&gt;feed.xml&lt;/code&gt; in your root folder. If not, &lt;a href=&quot;http://joelglovier.com/writing/rss-for-jekyll/&quot;&gt;read here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;tl;dr&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chinchang/super-search/&quot;&gt;&lt;strong&gt;super-search&lt;/strong&gt;&lt;/a&gt; - A library to easily add search on your jekyll or any other blog.&lt;/p&gt;
&lt;p&gt;Lets start implementing the search.&lt;/p&gt;
&lt;h3&gt;Fetching the RSS feeds.&lt;/h3&gt;
&lt;p&gt;First thing we need to do is fetch the RSS feed XML. This is simple with &lt;code&gt;XMLHttpRequest&lt;/code&gt;. We fetch the XML and create a DOM out of it for parsing later.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
var xmlhttp=new XMLHttpRequest();
xmlhttp.open(&#39;GET&#39;, &#39;/feed.xml&#39;);
xmlhttp.onreadystatechange = function () {
	if (xmlhttp.readyState != 4) return;
	if (xmlhttp.status != 200 &amp;&amp; xmlhttp.status != 304) { return; }

	// Create a DOM out of the XML string.
	var node = (new DOMParser).parseFromString(xmlhttp.responseText, &#39;text/xml&#39;);
	node = node.children[0];
	posts = xmlToJson(node).channel.item;
}
xmlhttp.send();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Parsing XML feeds into JSON&lt;/h3&gt;
&lt;p&gt;This can be done by traversing the XML tree and creating a JavaScript object as we go. I used &lt;a href=&quot;http://davidwalsh.name/convert-xml-json&quot;&gt;David Walsh&#39;s&lt;/a&gt; &lt;code&gt;xmlToJson&lt;/code&gt; function with some modifications to make it more suitable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
function xmlToJson(xml) {
	// Create the return object
	var obj = {};
	if (xml.nodeType == 3) { // text
		obj = xml.nodeValue;
	}

	// do children
	// If just one text node inside
	if (xml.hasChildNodes() &amp;&amp; xml.childNodes.length === 1 &amp;&amp; xml.childNodes[0].nodeType === 3) {
		obj = xml.childNodes[0].nodeValue;
	}
	else if (xml.hasChildNodes()) {
		for(var i = 0; i &lt; xml.childNodes.length; i++) {
			var item = xml.childNodes.item(i);
			var nodeName = item.nodeName;
			if (typeof(obj[nodeName]) == &quot;undefined&quot;) {
				obj[nodeName] = xmlToJson(item);
			} else {
				if (typeof(obj[nodeName].push) == &quot;undefined&quot;) {
					var old = obj[nodeName];
					obj[nodeName] = [];
					obj[nodeName].push(old);
				}
				obj[nodeName].push(xmlToJson(item));
			}
		}
	}
	return obj;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you get a simple to use JavaScript object to search upon.&lt;/p&gt;
&lt;h3&gt;Matching the input with post data&lt;/h3&gt;
&lt;p&gt;Now all that remains is taking user input and matching it with the parsed posts we have. In my implementation, matching posts are ones which contain the input string in their title or full content.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
document.querySelector(&#39;#your-search-input&#39;).addEventListener(&#39;input&#39;, onInputChange);

function onInputChange(e) {
	var currentInputValue = e.target.value,
		date;

	// We ignore input of less than 3 characters in length.
	if (!currentInputValue || currentInputValue.length &lt; 3) {
		return;
	}

	// Filter out all posts that have entered string in their
	// title or description.
	var matchingPosts = posts.filter(function (post) {
		if (post.title.indexOf(currentInputValue) !== -1 || post.description.indexOf(currentInputValue) !== -1) {
			return true;
		}
	});

	document.querySelector(&#39;#your-results-container&#39;).innerHTML = matchingPosts.map(function (post) {
		date = new Date(post.pubDate);
		return &#39;&lt;li&gt;&lt;a href=&quot;http://kushagragour.in/blog/2015/06/search-in-jekyll-blog/&#39;%20+%20post.link%20+%20&#39;&quot;&gt;&#39; + post.title + &#39;&lt;span class=&quot;search__result-date&quot;&gt;&#39; + date.toUTCString().replace(/.*(\d{2})\s+(\w{3})\s+(\d{4}).*/,&#39;$2 $1, $3&#39;) + &#39;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#39;;
	}).join(&#39;&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And done! You have a quick search system in your blog.&lt;/p&gt;
&lt;h3&gt;Thats not all!&lt;/h3&gt;
&lt;p&gt;I am releasing a library which implements the search system described above and even much more addons. Presenting &lt;a href=&quot;https://github.com/chinchang/super-search/&quot;&gt;&lt;strong&gt;super-search&lt;/strong&gt;&lt;/a&gt;, an easy to add search system for your blog. It works equally good with any blog having RSS feed file.&lt;/p&gt;
&lt;p&gt;Simply add the JS and CSS files to your blog:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;
&amp;lt;script src=&quot;super-search.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;super-search.css&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And initiate the library at the end of your page (before closing BODY tag):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
superSearch();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now enjoy a fast search system on your blog. &lt;a href=&quot;https://github.com/chinchang/super-search/&quot;&gt;Read more about it here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Until next time!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Journey with Rubik&#39;s Cube</title>
		<link href="http://kushagragour.in/blog/2015/04/journey-with-rubik-cube/"/>
		<updated>2015-04-04T00:00:00+05:30</updated>
		<id>http://kushagragour.in/blog/2015/04/journey-with-rubik-cube/</id>
		<content type="html">&lt;p&gt;Yes, I started playing with Rubik&#39;s cube recently. I have had rubik&#39;s cube (very cheap one though) since I was 14, but it was just time-pass then. I didn&#39;t know how to solve it. It was just one-sided play (if you get what I mean) as I could figure how to solve only one side completely. But this January my cousin came to our place for his vacations and he brought along a rubik&#39;s cube (probably just like me back then). As anyone would do now-a-days to know how something is done, I google-d too. And a lot of videos on how to solve rubik&#39;s cube showed up. Me and my cousin together learned how to solve the cube with the very basic method and have been practicing since then. I am writing this post to document the approach I have taken to learn whatever I know on solving a 3x3x3 rubik&#39;s cube. Lets start.&lt;/p&gt;
&lt;h3&gt;Learning Beginner&#39;s method&lt;/h3&gt;
&lt;p&gt;My very first step was a &lt;a href=&quot;https://www.youtube.com/watch?v=MaltgJGz-dU&quot;&gt;youtube video&lt;/a&gt; explaining the most basic method for solving a 3x3x3 rubik&#39;s cube, also called as &amp;quot;Beginner&#39;s method&amp;quot;.&lt;/p&gt;
&lt;p&gt;It requires you to know very few algorithms (5 to be exact) and is obviously a little slower compared to other methods. Once I had all the 5 algorithms by heart, I was able to solve a 3x3x3 cube in around 10 minutes on average. Remember this was with a very okayish cube.&lt;/p&gt;
&lt;p&gt;&lt;a&gt;&lt;strong&gt;Average Time: ~ 10 minutes&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Getting a new cube&lt;/h3&gt;
&lt;p&gt;As soon as my cousin left, I ordered a new cube online. It was a Taxton T-3 stickerless speedcube. It was damn smooth and I could just turn it the whole day. My solve times on that cube improved a lot, got almost 2x faster!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kushagragour.in/images/2015/taxton.jpg&quot; alt=&quot;Taxton speedcube&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a&gt;&lt;strong&gt;Average Time: ~ 5:20 minutes&lt;/strong&gt;&lt;a&gt;&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Getting faster with finger tricks&lt;/h3&gt;
&lt;p&gt;I kept seeing videos of rubik&#39;s cube championships and various tips and tricks on solving the cube faster. Soon it became clear that to lower my solve time I had 2 options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Learn a faster method of solving (Fridrich method)&lt;/li&gt;
&lt;li&gt;Get faster with what I already knew&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Upon a quick glance at the Fridrich method, I realized it was better not to take it at that time :P It has huge number of algorithms that one needs to learn to execute it perfectly. All rubik&#39;s cube champions use this method, in pure or derivative form. So I went with the second option, also called as finger tricks in puzzle world.&lt;/p&gt;
&lt;p&gt;Finger tricks basically refers to using your fingers to turn the cube instead of using complete hand (which is slower). Also it emphasizes on smooth transitions from one algorithm to another without wasting much time in getting ready to execute the next one. This is how those sub-20 second guyz are able to turn the cube layers sooooo fast! So I got down to this, practicing each algorithm individually I knew whenever I got time - in bus, train, office, home...everywhere. I actually did not do even a single solve for about 2 weeks, just practice individual algorithms and developing my own finger turn-style. And then I did a timed solve just to show a colleague I could also solve the cube apart from just turning it seemingly ad-hoc - I did it in 2:40 minutes that day!&lt;/p&gt;
&lt;p&gt;&lt;a&gt;&lt;strong&gt;Average Time: ~ 3 minutes&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Move to Fridrich Method?&lt;/h3&gt;
&lt;p&gt;Getting down to 3 minutes on average, I started feeling that I was not able to go lower than that. Also honestly I was getting a little bored with doing those algorithms over and over and over again. So I decided on giving Fridrich method a shot. Fridrich method involves large no. of algorithms which can be divided into categories:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;to solve 1st and 2nd layer - F2L&lt;/li&gt;
&lt;li&gt;to solve 3rd layer - PLL and OLL&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Approaching step by step, I decided to learn F2L (first two layers) first. F2L basically aims at solving the first 2 layers together as opposed to solving then one after other in beginner&#39;s method. Plan was to get F2L perfect for first 2 layers and use the already know algorithms for the 3rd layer. So I started learning and practicing F2L algorithms. There being too many of them, I felt friction in learning them :P So I looked for easier ways to perform F2L. There are quite a few &lt;a href=&quot;https://www.youtube.com/watch?v=2ewy0eOg2Do&quot;&gt;nice tutorials on easier F2L&lt;/a&gt; method which is also called as &lt;a href=&quot;https://www.youtube.com/watch?v=jGeTtD4tB5w&quot;&gt;intuitive F2L&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I practiced it for a week, but the results were not very impressive. I hardly got any better with F2L. I realized it was not a flaw with the method itself, but the time I devoted to it. It demands much much more time to get better with it.
It was at this time when I saw a video on youtube where a guy could do a 3x3x3 solve in under &lt;a href=&quot;https://www.youtube.com/watch?v=qLki-254ZKA&quot;&gt;20 seconds with beginner&#39;s method&lt;/a&gt;! The trick was simple - faster turns. So I decided to do away with F2L and focus back on my finger tricks.&lt;/p&gt;
&lt;p&gt;&lt;a&gt;&lt;strong&gt;Average Time: ~ 3 minutes&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;More practice - cross and 3rd layer algorithms&lt;/h3&gt;
&lt;p&gt;I focused for a while on improving my cross times and 3rd layer algorithms. Meanwhile I also came to know about a technique called look-ahead that advanced level solvers use to avoid time spent in figuring out the next move. I realized it was a very essential technique to get faster considering that my most of the time was spent in actually rotating the cube to see what to execute next. But this comes only with time and practice. I tried practicing look-aheads for 2nd layer.&lt;/p&gt;
&lt;p&gt;I bought another cube so that I didn&#39;t have to scramble after every solve during solve sprints :P It is a Shengshou 3x3x3 sticker cube. Much better than the taxton T-3. I love its turn sound!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kushagragour.in/images/2015/shenshou.jpg&quot; alt=&quot;Shenshou speedcube&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a&gt;&lt;strong&gt;Average Time: ~ 100 seconds&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;These days...&lt;/h3&gt;
&lt;p&gt;I have been focusing more on improving the individual steps rather than complete solves lately.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Faster cross&lt;/li&gt;
&lt;li&gt;2nd and 3rd layer algorithms&lt;/li&gt;
&lt;li&gt;2nd layer look-ahead&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a sample solve in 76 seconds:&lt;/p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/hVr-DeIR7TY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;My aim is to get atleast sub-60 seconds with just beginner&#39;s method before I move onto learning more advanced techniques. Wish me luck. Looking forward to hear your rubik&#39;s cube experiences.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>2014 - Year in review</title>
		<link href="http://kushagragour.in/blog/2014/12/2014-year-in-review/"/>
		<updated>2014-12-31T00:00:00+05:30</updated>
		<id>http://kushagragour.in/blog/2014/12/2014-year-in-review/</id>
		<content type="html">&lt;p&gt;Guess what...it has been an year since I last wrote a post here! Time has passed by pretty quickly (as always) this year. This post is just a written log of things that &lt;code&gt;(did_happen &amp;amp;&amp;amp; I_remember)&lt;/code&gt; this year. Lets begin.&lt;/p&gt;
&lt;h3&gt;January&lt;/h3&gt;
&lt;p&gt;2014 began with a bang. I published this year&#39;s first (and last too) blog post on &lt;a href=&quot;http://kushagragour.in/blog/2014/01/build-git-learn-git/&quot;&gt;learning GIT by implementing it in JavaScript&lt;/a&gt;. The post received a lot of appreciation on &lt;a href=&quot;https://news.ycombinator.com/item?id=7089380&quot;&gt;Hackernews&lt;/a&gt;. In short, people loved it. I had one or two further parts for this article, though I never couldn&#39;t take out time to finish them. 2015, may be :)&lt;/p&gt;
&lt;h3&gt;April&lt;/h3&gt;
&lt;p&gt;Nothing major here, but I had some &lt;a href=&quot;https://www.facebook.com/bhaisaab.baagi/media_set?set=a.310731669079177.1073741831.100004270386636&amp;amp;type=1&quot;&gt;really good 3-4 days&lt;/a&gt; with my awesome engineering team at Wingify. We were in the middle of our product&#39;s revamp and it had taken a lot of time already. Our engineering team was a little stressed out along with being excited. So we decided to leave our office for a few days and marched out to &#39;The Westin Sohna Resor&#39;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kushagragour.in/images/2014/westin1.jpg&quot; alt=&quot;&quot;&gt;
&lt;img src=&quot;http://kushagragour.in/images/2014/westin2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;All techie ppl inside one huge villa at such an awesome place writing code till 6 in the morning and pool games in the evening...crazy time it was.&lt;/p&gt;
&lt;h3&gt;June&lt;/h3&gt;
&lt;p&gt;One of the biggest acheivement this year. Months and months of effort by our engineering team at Wingify - &lt;a href=&quot;http://app.vwo.com/&quot;&gt;VWO 3.0&lt;/a&gt; finally released on June 25th. It was really a festive environment at the office. Everyone was super relaxed and extremely happy with what a bunch of cool engineers had created.&lt;/p&gt;
&lt;p&gt;I also released my first ever music piece in June. It was a &lt;a href=&quot;https://soundcloud.com/kushagra-gour/billie-jean-beatboxed&quot;&gt;beatbox on MJ&#39;s Billie Jean&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;July&lt;/h3&gt;
&lt;p&gt;Our cow, Bahula, gave a cute baby boy this month. We named him &#39;Krishna&#39; as he was dark in color. But with time his name got reduced to just &#39;Kalu&#39; :D Yeah, that is what we call him now :)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kushagragour.in/images/2014/kalu.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3&gt;September&lt;/h3&gt;
&lt;p&gt;Our complete engineering team went on a trip to the beautiful land of Nepal.. That place is amazing I must say. We did a small trek there and went on a bicycle sprint in Pokhra. Super fun-filled 4 days.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kushagragour.in/images/2014/nepal1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Wingify sponsored JSFoo this year which is a JavaScript conference in Banglore, India. So a bunch of people from engineering went there to setup a booth for 2 days. It was my first time attending a conference from sponsor point of view. It was nice altogether. I also gave a small hiring pitch on stage there in &#39;Hindi&#39; which received an applause from the audience :P&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kushagragour.in/images/2014/jsfoo.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3&gt;November&lt;/h3&gt;
&lt;p&gt;November was kickass! I spoke at a conference for the first time. And guess which conference it was - &lt;a href=&quot;http://2014.cssconf.asia/#speakers&quot;&gt;CSS Conf Asia&lt;/a&gt;! It was really a great experience to be speaking on CSS, at such a big conference, in front of such awesome people and along with such great co-speakers. &lt;a href=&quot;https://www.youtube.com/watch?v=FYcu-wWrNqo&quot;&gt;My talk&lt;/a&gt; went better than expected. People applauded and people laughed - that is all I wanted. Though I couldn&#39;t interact face to face much there :p I guess I&#39;m a digital geek.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/FYcu-wWrNqo&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
![](/images/2014/cssconf2.jpg)
&lt;p&gt;Plus I went to Universal Studios, Singapore. The most amazing thing there was the transformers ride...can&#39;t explain it in words. Had lots of fun with my friends - Himanshu and Kushagra.&lt;/p&gt;
&lt;p&gt;I also started maintaining a travelouge in this trip: &lt;a href=&quot;http://travel.kushagragour.in/&quot;&gt;http://travel.kushagragour.in/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;December&lt;/h3&gt;
&lt;p&gt;On December&#39;s first day I finally started my Facebook page - &lt;a href=&quot;https://www.facebook.com/bematlab&quot;&gt;&lt;strong&gt;&amp;quot;Bematlab&amp;quot;&lt;/strong&gt;&lt;/a&gt;. A place where I do what I love - draw &amp;amp; crack PJs, together :D Here is a latest comic from there:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kushagragour.in/images/2014/bematlab.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;I also released my &lt;a href=&quot;https://soundcloud.com/kushagra-gour/teri-yaaden-beatbox-jam&quot;&gt;second beatbox piece&lt;/a&gt;, this time a jam with a friend.&lt;/p&gt;
&lt;p&gt;In the end was Wingify&#39;s year end outing! We went to Krabi, Thailand. Water-water everywhere. Had nice time there.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kushagragour.in/images/2014/krabi1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;This year I travelled, drew stuff, attended a conference, spoke at a conference, created music, bought lots of toys, collected more flutes, worked on lots of side projects (couldn&#39;t release any though), spent more time with family and friend, learnt stuff. &lt;a href=&quot;https://github.com/chinchang/hint.css&quot;&gt;Hint.css&lt;/a&gt; reached 3000 stars on github.&lt;/p&gt;
&lt;h3&gt;For 2015 (in no order)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Create and release more amazing stuff&lt;/li&gt;
&lt;li&gt;Take &#39;Bematlab&#39; to next level&lt;/li&gt;
&lt;li&gt;Draw more&lt;/li&gt;
&lt;li&gt;Get better at Beatboxing&lt;/li&gt;
&lt;li&gt;Collaborate more with other artists and programmers&lt;/li&gt;
&lt;li&gt;Travel to more places&lt;/li&gt;
&lt;li&gt;Learn something new everyday&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Build GIT - Learn GIT (P1)</title>
		<link href="http://kushagragour.in/blog/2014/01/build-git-learn-git/"/>
		<updated>2014-01-20T00:00:00+05:30</updated>
		<id>http://kushagragour.in/blog/2014/01/build-git-learn-git/</id>
		<content type="html">&lt;p&gt;If you are reading this post, you probably are using Git or want to use Git. I am a big fan of Git and also &lt;a href=&quot;http://teropa.info/blog/2013/11/03/make-your-own-angular-part-1-scopes-and-digest.html&quot;&gt;those posts&lt;/a&gt; where people &lt;a href=&quot;http://modernjavascript.blogspot.in/2013/08/promisesa-understanding-by-doing.html&quot;&gt;implement some piece of an existing technology&lt;/a&gt; in order to understand how their work in the core. Point being that if you have implemented something, you obviously know how it works, right? This is one such post written to spread my love for Git. &lt;strong&gt;Yes, we&#39;ll implement Git!&lt;/strong&gt;...in JavaScript.&lt;/p&gt;
&lt;p&gt;This part implements basics of the following concepts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Repository.&lt;/li&gt;
&lt;li&gt;Commit.&lt;/li&gt;
&lt;li&gt;Commit chaining.&lt;/li&gt;
&lt;li&gt;Branch.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All the code written is available in a Github repo:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chinchang/build-git-learn-git/&quot; class=&quot;button button-big&quot;&gt;Github Repo&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;What is Git?&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;There is a very simple definition of Git at &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/user-manual.html#repositories-and-branches&quot;&gt;kernel.org&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
Git is best thought of as a tool for storing the history of a collection of files.
&lt;/blockquote&gt;
&lt;p&gt;Yeah, that is essentially why one uses Git...to maintain a history of changes in a project.&lt;/p&gt;
&lt;h3&gt;Repository (repo)&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;When you want to use Git in your project, you create something called a &lt;strong&gt;Repository&lt;/strong&gt;. Now we could refer the &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/gitglossary.html&quot;&gt;Git documentation&lt;/a&gt; which defines a repo as follows:&lt;/p&gt;
&lt;blockquote&gt;
A collection of refs together with an object database containing all objects which are reachable from the refs, possibly accompanied by meta data from one or more porcelains. A repository can share an object database with other repositories via alternates mechanism.
&lt;/blockquote&gt;
&lt;p&gt;Well, that is too much to grasp, isn&#39;t it? And that is not what we are here for. So lets make things simple.
Consider a Git repository as a collection of everything related to Git. So when you make a project folder a Git repo, Git basically creates some of its internal stuff there and encapsulates them into it. Having said that, lets make a simple class called &lt;code&gt;Git&lt;/code&gt; which will basically represent a repo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
function Git(name) {
	this.name = name; // Repo name
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great! Now making a repo simply requires us to instantiate the &lt;code&gt;Git&lt;/code&gt; class passing in the name of the repo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
var repo = new Git(&#39;my-repo&#39;);

// Actual command:
// &gt; git init
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Commit&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Next concept one needs to know about is a &lt;strong&gt;Commit&lt;/strong&gt;. In very simple terms, a commit is a snapshot of your project&#39;s contents. It is these commits which when chained together form the history of your project.&lt;/p&gt;
&lt;p&gt;From the looks of it, a simple &lt;code&gt;Commit&lt;/code&gt; class would have and &lt;em&gt;id&lt;/em&gt; to reference it and a &lt;em&gt;change&lt;/em&gt; containing the snapshot of change made. Understanding how a change is actually stored is beyond the scope of this implementation. So lets drop the &lt;em&gt;change&lt;/em&gt; part and assume that every commit has the change with it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
function Commit(id) {
	this.id = id;
	// Assume that &#39;this&#39; has a &#39;change&#39; property too.
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Git, when you commit after making some changes, you can give it a message which describes the change you are commiting. This is called the &lt;em&gt;commit message&lt;/em&gt; which we&#39;ll add to our &lt;code&gt;Commit&lt;/code&gt; class:&lt;/p&gt;
&lt;pre data-line=&quot;2,4&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
function Commit(id, message) {
	this.id = id;
	this.message = message;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets add the ability on our &lt;code&gt;Git&lt;/code&gt; class to create a commit or commit (verb):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
Git.prototype.commit = function (message) {
	var commit = new Commit();
	return commit;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We add a function called &lt;code&gt;commit&lt;/code&gt; on the &lt;code&gt;Git&lt;/code&gt; prototype. It accepts a string message, creates a new &lt;strong&gt;Commit&lt;/strong&gt; instance and returns it. Note that we are not passing in anything yet in the &lt;code&gt;Commit&lt;/code&gt; constructor. We need an id to give to the new commit. We&#39;ll make the &lt;code&gt;Git&lt;/code&gt; class keep track of the commit ids by keeping a counter called &lt;code&gt;lastCommitId&lt;/code&gt; with it:&lt;/p&gt;
&lt;pre data-line=&quot;3&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
function Git() {
	this.lastCommitId = -1;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: In actual Git, commit id is a 40-hexdigit number also called as &amp;quot;SHA-1 id&amp;quot;. But for keeping things simple we are using integers here.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;commit&lt;/code&gt; function can now pass a new id (incremented) along with the message in the constructor:&lt;/p&gt;
&lt;pre data-line=&quot;3&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
Git.prototype.commit = function (message) {
	var commit = new Commit(++this.lastCommitId, message);
	return commit;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now commit anytime like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
repo.commit(&#39;Make commit work&#39;);

// Actual command:
// &gt; git commit -m &quot;Make commit work&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Match your code&lt;/h4&gt;
&lt;hr&gt;
&lt;p&gt;At this point you should have your implementation that looks like &lt;a href=&quot;https://github.com/chinchang/build-git-learn-git/blob/ffb353b30e5eee92190e42a989c14ca0a74bb65a/git-part1.js&quot;&gt;the one here&lt;/a&gt;. I have wrapped the whole code in an Immediately invoking function expression (IIFE) and exposed the &lt;code&gt;Git&lt;/code&gt; class manually to keep global space clean.&lt;/p&gt;
&lt;h3&gt;Commit history - chaining the commits&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Git has a command called &lt;code&gt;log&lt;/code&gt; which shows the commit history in reverse chronological order, i.e. first the lastest commit followed by previous ones.&lt;/p&gt;
&lt;p&gt;Lets implement this &lt;code&gt;log&lt;/code&gt; command as a method on our &lt;code&gt;Git&lt;/code&gt; class. Our log function will return an array of commits in reverse chronological order.&lt;/p&gt;
&lt;p&gt;Here is a simple test which should pass for our log function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
console.log(&#39;Git.log() test&#39;);
var repo = new Git(&#39;test&#39;);
repo.commit(&#39;Initial commit&#39;);
repo.commit(&#39;Change 1&#39;);

var log = repo.log();
console.assert(log.length === 2); // Should have 2 commits.
console.assert(!!log[0] &amp;amp;&amp;amp; log[0].id === 1); // Commit 1 should be first.
console.assert(!!log[1] &amp;amp;&amp;amp; log[1].id === 0); // And then Commit 0.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Onto the implementation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
Git.prototype.log = function () {
	var history = []; // array of commits in reverse order.

	// 1. Start from last commit
	// 2. Go back tracing to the first commit
	// 3. Push in `history`

	return history;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;log&lt;/code&gt; function has only pseudo code right now in form of comments which tell us the logic of the function. To implement such logic 2 requirements arise:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We need to know the last commit.&lt;/li&gt;
&lt;li&gt;Every commit should somehow know which commit was made before it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We have a failing test case right now:
&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/AqAbEmuN/1/embed?js,console&quot;&gt;Build Git - Learn Git (part 1)&lt;/a&gt;&lt;/p&gt;
&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Lets take up the first requirement: Knowing the last commit.&lt;/p&gt;
&lt;p&gt;Git has something called a &lt;strong&gt;HEAD&lt;/strong&gt;. In actual Git it is simply a pointer to your current branch. But since we have not covered branches yet, we&#39;ll relax the definition here...temporarily.&lt;/p&gt;
&lt;p&gt;What we&#39;ll do is add a property called &lt;code&gt;HEAD&lt;/code&gt; in the &lt;code&gt;Git&lt;/code&gt; class which will reference the last commit&#39;s &lt;code&gt;Commit&lt;/code&gt; object:&lt;/p&gt;
&lt;pre data-line=&quot;5&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
function Git(name) {
	this.name = name; // Repo name
	this.lastCommitId = -1; // Keep track of last commit id.
	this.HEAD = null; // Reference to last Commit.
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;HEAD&lt;/code&gt; will be updated everytime a commit is made i.e. in the &lt;code&gt;commit()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre data-line=&quot;6-7&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
Git.prototype.commit = function (message) {
	// Increment last commit id and pass into new commit.
	var commit = new Commit(++this.lastCommitId, message);

	// Update HEAD and current branch.
	this.HEAD = commit;

	return commit;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Simple! Now we always know which was the last commit made.&lt;/p&gt;
&lt;p&gt;Getting on the 2nd requirement: Every commit should somehow know which commit was made before it. This brings up the concept of &lt;strong&gt;parent&lt;/strong&gt; in Git. Commits in Git are kept together in form a data structure called &lt;a href=&quot;http://en.wikipedia.org/wiki/Linked_list&quot;&gt;&lt;strong&gt;Linked Lists&lt;/strong&gt;&lt;/a&gt;. Simply put, in a Linked List every item stores with itself a pointer to its parent item. This is done so that from every item, we can reach its parent item and keep following the pointers to get an ordered list. This diagram from Wikipedia will will make more sense:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/6/6d/Singly-linked-list.svg&quot; alt=&quot;Linked list&quot;&gt;&lt;/p&gt;
&lt;p&gt;For this, we add a property called &lt;code&gt;parent&lt;/code&gt; in the &lt;code&gt;Commit&lt;/code&gt; class which will reference its parent commit object:&lt;/p&gt;
&lt;pre data-line=&quot;2,4&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
function Commit(id, parent, message) {
	this.id = id;
	this.parent = parent;
	this.message = message;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The parent commit also needs to be passed into the &lt;code&gt;Commit&lt;/code&gt; constructor. If you think, for a new commit what is the parent/previous commit? Yes, the current commit or the &lt;code&gt;HEAD&lt;/code&gt;.&lt;/p&gt;
&lt;pre data-line=&quot;4&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
Git.prototype.commit = function (message) {
	// Increment last commit id and pass into new commit.
	var commit = new Commit(++this.lastCommitId, this.HEAD, message);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Having our requirements in place, lets implement the &lt;code&gt;log()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
Git.prototype.log = function () {
	// Start from HEAD
	var commit = this.HEAD,
		history = [];

	while (commit) {
		history.push(commit);
		// Keep following the parent
		commit = commit.parent;
	}

	return history;
};

// Can be used as repo.log();
// Actual command:
// &gt; git log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our test should pass now:
&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/AqAbEmuN/2/embed?js,console&quot;&gt;Build Git - Learn Git (part 1)&lt;/a&gt;&lt;/p&gt;
&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;
&lt;h4&gt;Match your code&lt;/h4&gt;
&lt;hr&gt;
&lt;p&gt;At this point our code looks &lt;a href=&quot;https://github.com/chinchang/build-git-learn-git/blob/116871ab54376e489af538fa1ba1a7e04359e704/git-part1.js&quot;&gt;like this&lt;/a&gt;.
Next up is Branches!&lt;/p&gt;
&lt;h3&gt;Branches&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Hurray, we have reached at the most interesting &amp;amp; powerful feature of Git: Branches. So what is a Branch and what is it used for?&lt;/p&gt;
&lt;p&gt;Imagine this scenario, you are working on a project making commits now and then. At some point may be you or one of your teammate wants to experiment something on your current work, say a different algorithm. You could surely keep making those experimental commits, but remember this was your experiment and hence not guaranteed to be kept in the main project. This way you polluted your main project.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Branches to the rescue&lt;/strong&gt;. What you need to do here is branch out from your current line of commits so that the commits you make do not pollute the main line of development.&lt;/p&gt;
&lt;p&gt;To quote the definition at kernel.org:&lt;/p&gt;
&lt;blockquote&gt;
A &quot;branch&quot; is an active line of development. The most recent commit on a branch is referred to as the tip of that branch. The tip of the branch is referenced by a branch head, which moves forward as additional development is done on the branch. A single git repository can track an arbitrary number of branches
&lt;/blockquote&gt;
&lt;p&gt;Lets understand what a branch is. A branch is nothing but a mere pointer to some commit. Seriously, that is it. That is what makes branches in Git so lightweight and use-n-throw type. You may say &lt;code&gt;HEAD&lt;/code&gt; was exactly this. You are right. The only difference being that &lt;code&gt;HEAD&lt;/code&gt; is just one (because at a given time you are only on a single commit) but branches can be many, each pointing to a commit.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;&#39;master&#39; branch&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Each Git repo when initialized comes with a default branch called &lt;em&gt;master&lt;/em&gt;. Lets understand branches through some diagrams from &lt;a href=&quot;http://git-scm.com/book/en/Git-Branching-What-a-Branch-Is&quot;&gt;git-scm.com&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;You create a new repository and make some commits:
&lt;img src=&quot;http://git-scm.com/figures/18333fig0303-tn.png&quot; alt=&quot;Just master&quot;&gt;&lt;/p&gt;
&lt;p&gt;Then you create a new branch called &lt;em&gt;testing&lt;/em&gt;:
&lt;img src=&quot;http://git-scm.com/figures/18333fig0304-tn.png&quot; alt=&quot;New branch &#39;testing&#39;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Nothing much, just a new pointer called &lt;em&gt;testing&lt;/em&gt; to the lastest commit.
How does Git know which branch you are on? Here comes the &lt;code&gt;HEAD&lt;/code&gt;. &lt;code&gt;HEAD&lt;/code&gt; points to the current branch:
&lt;img src=&quot;http://git-scm.com/figures/18333fig0306-tn.png&quot; alt=&quot;HEAD pointing &#39;testing&#39;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now comes interesting part. Being on &lt;em&gt;testing&lt;/em&gt; branch you make a commit. Notice what happens:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://git-scm.com/figures/18333fig0307-tn.png&quot; alt=&quot;&#39;testing&#39; moves&quot;&gt;&lt;/p&gt;
&lt;p&gt;From now on, the &lt;em&gt;testing&lt;/em&gt; branch/pointer only moves and not &lt;em&gt;master&lt;/em&gt;. Looking at the above diagram and keeping our &lt;code&gt;log()&lt;/code&gt; algorithm in mind, lets see what history would each branch return.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;testing branch&lt;/em&gt;: Currently we are on &lt;em&gt;testing&lt;/em&gt; branch. Moving backwards from &lt;code&gt;HEAD&lt;/code&gt;(commit &lt;em&gt;c2b9e&lt;/em&gt;) and tracking the visible linkages, we get the history as:
|c2b9e| -&amp;gt; |f30ab| -&amp;gt; |34ac2| -&amp;gt; |98ca9|&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;master branch&lt;/em&gt;: If we switch to &lt;em&gt;master&lt;/em&gt; branch, we would have a state as follows:
&lt;img src=&quot;http://git-scm.com/figures/18333fig0308-tn.png&quot; alt=&quot;Back to master&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now tracing back from &lt;code&gt;HEAD&lt;/code&gt; gives us the history as:
|f30ab| -&amp;gt; |34ac2| -&amp;gt; |98ca9|&lt;/p&gt;
&lt;p&gt;You see what we acheived? We were able to make some experimental changes/commits without polluting the main branch (master) history using branches. Isn&#39;t that cool!!!&lt;/p&gt;
&lt;p&gt;Enough said, lets code. First lets make a new class for a branch. A branch, as we saw, has a name and a reference to some commit:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
function Branch(name, commit) {
	this.name = name;
	this.commit = commit;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default, Git gives you a branch called &lt;em&gt;master&lt;/em&gt;. Lets create one:&lt;/p&gt;
&lt;pre data-line=&quot;7&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
function Git(name) {
	this.name = name; // Repo name
	this.lastCommitId = -1; // Keep track of last commit id.
	this.HEAD = null; // Reference to last Commit.

	var master = new Branch(&#39;master&#39;, null); // null is passed as we don&#39;t have any commit yet.
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember we changed the meaning of &lt;code&gt;HEAD&lt;/code&gt; in the beginning as we were still to cover branches? Its time we make it do what its meant for i.e. reference the current branch (&lt;em&gt;master&lt;/em&gt; when repo is created):&lt;/p&gt;
&lt;pre data-line=&quot;8&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
function Git(name) {
	this.name = name; // Repo name
	this.lastCommitId = -1; // Keep track of last commit id.

	var master = new Branch(&#39;master&#39;, null); // null is passed as we don&#39;t have any commit yet.

	this.HEAD = master; // HEAD points to current branch.
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will require certain changes in the &lt;code&gt;commit()&lt;/code&gt; function as &lt;code&gt;HEAD&lt;/code&gt; is no longer referencing a &lt;code&gt;Commit&lt;/code&gt; but a &lt;code&gt;Branch&lt;/code&gt; now:&lt;/p&gt;
&lt;pre data-line=&quot;4,6-7&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
Git.prototype.commit = function (message) {
	// Increment last commit id and pass into new commit.
	var commit = new Commit(++this.lastCommitId, this.HEAD.commit, message);

	// Update the current branch pointer to new commit.
	this.HEAD.commit = commit;

	return commit;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And a minor change in &lt;code&gt;log&lt;/code&gt; function. We start from &lt;code&gt;HEAD.commit&lt;/code&gt; now:&lt;/p&gt;
&lt;pre data-line=&quot;4&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
Git.prototype.log = function () {
	// Start from HEAD commit
	var commit = this.HEAD.commit,
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Everything works as before. To really verify what we deduced in theory by calculating history of those 2 branches above, we need one final method on our &lt;code&gt;Git&lt;/code&gt; class: &lt;strong&gt;checkout&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To begin with, consider &lt;em&gt;checkout&lt;/em&gt; as switching branches. By default we are on &lt;em&gt;master&lt;/em&gt; branch. If I do something like &lt;code&gt;repo.checkout(&#39;testing&#39;)&lt;/code&gt;, I should jump to &lt;em&gt;testing&lt;/em&gt; branch...provided it is already created. But if its not created already, a new branch with that name should be created. Lets write a test for this method.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
console.log(&#39;Git.checkout() test&#39;)
var repo = new Git(&#39;test&#39;);
repo.commit(&#39;Initial commit&#39;);

console.assert(repo.HEAD.name === &#39;master&#39;); // Should be on master branch.
repo.checkout(&#39;testing&#39;);
console.assert(repo.HEAD.name === &#39;testing&#39;); // Should be on new testing branch.
repo.checkout(&#39;master&#39;);
console.assert(repo.HEAD.name === &#39;master&#39;); // Should be on master branch.
repo.checkout(&#39;testing&#39;);
console.assert(repo.HEAD.name === &#39;testing&#39;); // Should be on testing branch again.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This test fails right now as we don&#39;t have a &lt;code&gt;checkout&lt;/code&gt; method yet. Lets write one:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
Git.prototype.checkout = function (branchName) {
	// Check if a branch already exists with name = branchName
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The comment in above code requires that the repo maintains a list of all created branches. So we put a property called &lt;code&gt;branches&lt;/code&gt; on &lt;code&gt;Git&lt;/code&gt; class with initially having only &lt;em&gt;master&lt;/em&gt; in it:&lt;/p&gt;
&lt;pre data-line=&quot;5,8&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
function Git(name) {
	this.name = name; // Repo name
	this.lastCommitId = -1; // Keep track of last commit id.
	this.branches = []; // List of all branches.

	var master = new Branch(&#39;master&#39;, null); // No commit yet, so null is passed.
	this.branches.push(master); // Store master branch.

	this.HEAD = master; // HEAD points to current branch.
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Continuing with the &lt;code&gt;checkout&lt;/code&gt; function now. Taking first case when we find an existing branch, all we need to do is point the &lt;code&gt;HEAD&lt;/code&gt;, the current branch pointer, to that existing branch:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
Git.prototype.checkout = function (branchName) {
	// Loop through all branches and see if we have a branch
	// called `branchName`.
	for (var i = this.branches.length; i--;){
		if (this.branches[i].name === branchName) {
			// We found an existing branch
			console.log(&#39;Switched to existing branch: &#39; + branchName);
			this.HEAD = this.branches[i];
			return this;
		}
	}

	// We reach here when no matching branch is found.
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I returned &lt;code&gt;this&lt;/code&gt; from that method so that methods can be chanined. Next, incase we don&#39;t find a branch with the passed name, we create one just like we did for &lt;em&gt;master&lt;/em&gt;:&lt;/p&gt;
&lt;pre data-line=&quot;14-22&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
Git.prototype.checkout = function (branchName) {
	// Loop through all branches and see if we have a branch
	// called `branchName`.
	for (var i = this.branches.length; i--;){
		if (this.branches[i].name === branchName) {
			// We found an existing branch
			console.log(&#39;Switched to existing branch: &#39; + branchName);
			this.HEAD = this.branches[i];
			return this;
		}
	}

	// If branch was not found, create a new one.
	var newBranch = new Branch(branchName, this.HEAD.commit);
	// Store branch.
	this.branches.push(newBranch);
	// Update HEAD
	this.HEAD = newBranch;

	console.log(&#39;Switched to new branch: &#39; + branchName);
	return this;

}

// Actual command:
// &gt; git checkout existing-branch
// &gt; git checkout -b new-branch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Eureka! Now our &lt;code&gt;checkout&lt;/code&gt; tests pass :)&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/AqAbEmuN/3/embed?js,console&quot;&gt;Build Git - Learn Git (part 1)&lt;/a&gt;&lt;/p&gt;
&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Now the grand moment for which we created the &lt;code&gt;checkout&lt;/code&gt; function. Verifying the awesomeness of branches through the theory we saw earlier. We&#39;ll write one final test to verify the same:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
console.log(&#39;3. Branches test&#39;);

var repo = new Git(&#39;test&#39;);
repo.commit(&#39;Initial commit&#39;);
repo.commit(&#39;Change 1&#39;);

// Maps the array of commits into a string of commit ids.
// For [C2, C1,C3], it returns &quot;2-1-0&quot;
function historyToIdMapper (history) {
	var ids = history.map(function (commit) {
		return commit.id;
	});
	return ids.join(&#39;-&#39;);
}

console.assert(historyToIdMapper(repo.log()) === &#39;1-0&#39;); // Should show 2 commits.

repo.checkout(&#39;testing&#39;);
repo.commit(&#39;Change 3&#39;);

console.assert(historyToIdMapper(repo.log()) === &#39;2-1-0&#39;); // Should show 3 commits.

repo.checkout(&#39;master&#39;);
console.assert(historyToIdMapper(repo.log()) === &#39;1-0&#39;); // Should show 2 commits. Master unpolluted.

repo.commit(&#39;Change 3&#39;);
console.assert(historyToIdMapper(repo.log()) === &#39;3-1-0&#39;); // Continue on master with 4th commit.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This test basically represents the diagrams we saw earlier explaining the working of branches. Lets see if our implementation is inline with the theory:&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/AqAbEmuN/4/embed?js,console&quot;&gt;Build Git - Learn Git (part 1)&lt;/a&gt;&lt;/p&gt;
&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Wonderful! Our implementation is right. The final code for this part can be found in GIT repo: &lt;code&gt;git-part1.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chinchang/build-git-learn-git/&quot; class=&quot;button button-big&quot;&gt;Github Repo&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Whats next?&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Next I plan to implement concepts like merging (Fast-forward and 3-way-merge) and rebasing of branches.&lt;/p&gt;
&lt;p&gt;I had a lot of fun writing this and hope you enjoyed it too. If you did, share the Git love with others.&lt;/p&gt;
&lt;p&gt;Till next time, bbye.&lt;/p&gt;
&lt;h4&gt;References&lt;/h4&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://git-scm.com/book/en/&quot;&gt;http://git-scm.com/book/en/&lt;/a&gt; (Where I learned Git from)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/gitglossary.html&quot;&gt;https://www.kernel.org/pub/software/scm/git/docs/gitglossary.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks &lt;a href=&quot;http://jsbin.com/&quot;&gt;JSBin&lt;/a&gt; for your lovely console panel :)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update: Join the &lt;a href=&quot;https://news.ycombinator.com/item?id=13711798&quot;&gt;discussion on HN&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Creating a 3D Cube Image Gallery</title>
		<link href="http://kushagragour.in/blog/2013/08/creating-a-3d-cube-image-gallery/"/>
		<updated>2013-08-06T00:00:00+05:30</updated>
		<id>http://kushagragour.in/blog/2013/08/creating-a-3d-cube-image-gallery/</id>
		<content type="html"></content>
	</entry>
	
	<entry>
		<title>[Tutorial] Getting started with Chart.js</title>
		<link href="http://kushagragour.in/blog/2013/06/getting-started-with-chartjs/"/>
		<updated>2013-06-02T00:00:00+05:30</updated>
		<id>http://kushagragour.in/blog/2013/06/getting-started-with-chartjs/</id>
		<content type="html">&lt;p&gt;I had been recording data from Alexa since &lt;a href=&quot;http://kushagragour.in/lab/hint/&quot;&gt;Hint.css&lt;/a&gt; went live just to track its popularity and reach. Nothing too complex, just maintained a JSON file and added new object in an array for each data point. I had been thinking if I could visualize this data, just for fun. Did try &lt;a href=&quot;http://d3js.org/&quot;&gt;d3.js&lt;/a&gt;. Though its a really awesome library for data visualization and all, it surely has some learning curve before you can have something out of it.&lt;/p&gt;
&lt;p&gt;Then today I thought, lets try &lt;a href=&quot;http://www.chartjs.org/&quot;&gt;chart.js&lt;/a&gt; which had been on HN sometime back. And I must say, its so easy to get started with it and that is probably the reason I am writing this post for anyone who wants to do some chart work really really quick.&lt;/p&gt;
&lt;p&gt;Here is what I did.&lt;/p&gt;
&lt;p&gt;This is the sample of data I had which I wanted to visualize:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    date&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;15-12-2012&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    rank&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1896594&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;sites-linking&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    date&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;17-12-2012&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    rank&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1895639&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;sites-linking&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    date&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;09-02-2013&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    rank&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;413592&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;sites-linking&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;47&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    date&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;12-02-2013&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    rank&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;327643&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;sites-linking&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;55&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    date&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;14-02-2013&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    rank&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;313141&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;sites-linking&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;55&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    date&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;15-02-2013&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    rank&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;292197&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;sites-linking&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;55&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    date&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;25-02-2013&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    rank&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;242294&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;sites-linking&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;88&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    date&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;26-02-2013&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    rank&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;234704&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;sites-linking&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;88&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    date&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;02-03-2013&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    rank&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;213869&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;sites-linking&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First thing I did was clone the &lt;a href=&quot;https://github.com/nnnick/Chart.js&quot;&gt;github repo for Chart.js&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; clone git://github.com/nnnick/Chart.js.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; Chart.js&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the repo, you&#39;ll find a &lt;code&gt;samples/&lt;/code&gt; folder which has some examples of using Chart.js. I needed a line chart, so I opened &lt;code&gt;samples/line.html&lt;/code&gt; in Sublime and started reading the code. It was such little code which created a sweet little line graph with subtle animations.&lt;/p&gt;
&lt;p&gt;This was the old JS there:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; lineChartData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  labels&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;January&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;February&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;March&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;April&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;May&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;June&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;July&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  datasets&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      fillColor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rgba(220,220,220,0.5)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      strokeColor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rgba(220,220,220,1)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      pointColor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rgba(220,220,220,1)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      pointStrokeColor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#fff&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;81&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      fillColor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rgba(151,187,205,0.5)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      strokeColor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rgba(151,187,205,1)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      pointColor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rgba(151,187,205,1)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      pointStrokeColor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#fff&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;96&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; myLine &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Chart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;canvas&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;2d&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Line&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  lineChartData&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next what I did was get my data into that script. So I simply made a variable and assigned my object to it. Also to begin with, I removed one of the data set entry from the array so I can visualize just the &lt;code&gt;rank&lt;/code&gt; key:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; myData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      date&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;15-12-2012&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      rank&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1896594&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;sites-linking&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      date&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;17-12-2012&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      rank&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1895639&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;sites-linking&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      date&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;09-02-2013&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      rank&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;413592&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;sites-linking&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;47&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      date&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;12-02-2013&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      rank&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;327643&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;sites-linking&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;55&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      date&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;14-02-2013&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      rank&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;313141&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;sites-linking&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;55&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      date&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;15-02-2013&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      rank&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;292197&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;sites-linking&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;55&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      date&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;25-02-2013&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      rank&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;242294&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;sites-linking&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;88&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      date&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;26-02-2013&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      rank&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;234704&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;sites-linking&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;88&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      date&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;02-03-2013&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      rank&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;213869&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;sites-linking&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  lineChartData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    labels&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;January&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;February&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;March&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;April&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;May&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;June&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;July&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    datasets&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        fillColor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rgba(220,220,220,0.5)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        strokeColor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rgba(220,220,220,1)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        pointColor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rgba(220,220,220,1)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        pointStrokeColor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#fff&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;81&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you note in the above code where &lt;code&gt;lineChartData&lt;/code&gt; is being created, values corresponding to the data we want to visualize are arrays. To be specific, its the &lt;code&gt;label&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt; keys in that object. So we need to convert our data into arrays which could be assigned to those 2 keys.&lt;/p&gt;
&lt;p&gt;For that I made a small function called &lt;code&gt;mapProperty&lt;/code&gt; (inspired from Emberjs) which basically maps the array with only the passed property values.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;mapProperty&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;property&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;property&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Example: myData.mapProperty(&#39;rank&#39;) to get an array of all ranks&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now all I had to do is use the above function to map my data on appropriate key and assign in the &lt;code&gt;lineChartData&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;lineChartData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  labels&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; myData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mapProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  datasets&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      fillColor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rgba(220,220,220,0.5)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      strokeColor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rgba(220,220,220,1)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      pointColor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rgba(220,220,220,1)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      pointStrokeColor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#fff&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; myData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mapProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;rank&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I refreshed the page in browser and voila! My data was converted into a beautiful chart. Wasn&#39;t that dead simple?&lt;/p&gt;
&lt;img src=&quot;http://kushagragour.in/images/2013/rank-chart.png&quot; alt=&quot;Alexa rank visualized&quot; title=&quot;Alexa rank chart&quot;&gt;
&lt;p&gt;I added another dataset entry for the &lt;code&gt;sites-linking&lt;/code&gt;, but &lt;code&gt;rank&lt;/code&gt; values being much larger than &lt;code&gt;sites-linking&lt;/code&gt; key, it made the &lt;code&gt;sites-linking&lt;/code&gt; line almost invisible.&lt;/p&gt;
&lt;p&gt;To sum up,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Good&lt;/strong&gt;: easy to use, fast, nice animations, multiple chart types&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bad&lt;/strong&gt;: no tooltips, no interactivity&lt;/p&gt;
&lt;p&gt;Its still a new library and has a long way to go. It has been receiving contributions from Open Source developers and I think it will evolve into a cool visualization library soon.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nnnick/Chart.js&quot;&gt;Hack it here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Cheers :)&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Year&#39;s first side project- Hint.css</title>
		<link href="http://kushagragour.in/blog/2013/02/years-first-side-project-hint/"/>
		<updated>2013-02-17T00:00:00+05:30</updated>
		<id>http://kushagragour.in/blog/2013/02/years-first-side-project-hint/</id>
		<content type="html">&lt;p&gt;Hey everyone!&lt;/p&gt;
&lt;p&gt;It has been around a month and a half since we jumped into 2013. And this is my first post of the year. I released a side project called &lt;a href=&quot;http://kushagragour.in/lab/hint/&quot;&gt;&lt;strong&gt;Hint.css&lt;/strong&gt;&lt;/a&gt; some days back on Hacker News and this post is primarily about what it is, how it works and what all I learned while creating it.&lt;/p&gt;
&lt;p&gt;First I would like to mention how nicely it was received and appreciated by the community. Here are some stats for the same:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I &lt;a href=&quot;http://news.ycombinator.com/item?id=5164029&quot;&gt;released it on Hacker News&lt;/a&gt; on 4th Feb 2013 where it attained #1 ranking just after half an hour or so. Cool eh? BTW, this was the first time my submission got to #1 :) It got &lt;strong&gt;224 upvotes&lt;/strong&gt;. Thank you!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a result of the above, the project page around 20K+ unique views. Heres an image showing some realtime stats after ~3 hours of release (&lt;em&gt;Note: The realtime count did went above 300, but come on...I was not in a state to take a screenshot then :P&lt;/em&gt;):&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;http://kushagragour.in/images/2013/hint-realtime-stats.png&quot; alt=&quot;Hint GA realtime stats&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/chinchang/hint.css/&quot;&gt;github repo&lt;/a&gt; has been starred and forked 1.4K+ and 100+ times respectively.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Also the repo is still in the &lt;a href=&quot;https://github.com/explore/month&quot;&gt;list of most trending repos&lt;/a&gt; on github.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So all in all, the launch was beyond expectations and really good.&lt;/p&gt;
&lt;p&gt;###About hint.css&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;hint.css&lt;/strong&gt; is a library written in SASS to create simple tooltips. So basically it uses only HTML and CSS to create tooltips for your lovely websites. Yes you heard that right, no JavaScript required. &lt;a href=&quot;http://kushagragour.in/lab/hint/&quot;&gt;Learn more&lt;/a&gt; about how to use it.&lt;/p&gt;
&lt;p&gt;The library uses the &lt;a href=&quot;https://gist.github.com/necolas/1309546&quot;&gt;BEM naming convention&lt;/a&gt; by &lt;a href=&quot;http://nicolasgallagher.com/about-html-semantics-front-end-architecture/&quot;&gt;Nicolas Gallagher&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;###How does it work
The library uses 4 basic concepts to create the tooltips without a line of JavaScript or any extra markup:&lt;/p&gt;
&lt;p&gt;####1. Pseudo elements
Pseudo elements are a gift for web developers which open numerous possibilities for creating amazing stuff. &lt;strong&gt;Hint.css&lt;/strong&gt; makes use of these pseudo elements (&lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; elements) to create the actual tooltip.&lt;/p&gt;
&lt;p&gt;This has the advantage that you do not have to add any extra markup on your page. But it has a downside too. As the tooltip is created using pseudo elements, its not possible to use them for any other purpose on the element you put tooltip on.&lt;/p&gt;
&lt;p&gt;####2. data-_ attributes
The tooltips need to be told what text to show. How do we provide this text? &lt;a href=&quot;http://www.w3.org/TR/2011/WD-html5-20110525/elements.html#embedding-custom-non-visible-data-with-the-data-attributes&quot;&gt;&lt;code&gt;data-_ &lt;/code&gt;&lt;/a&gt; attributes to the rescue. They let you put custom data on any element using attributes. So &lt;strong&gt;hint.css&lt;/strong&gt; expects you to define an attribute called &lt;code&gt;data-hint&lt;/code&gt; on the element which needs a tooltip:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;Out of the many, &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-hint&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Tooltip text&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;this&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; word needs a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;tooltip.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;####3. attr function for content
Now the most important part on which &lt;strong&gt;hint.css&lt;/strong&gt; is based on. You may have heard about the &lt;code&gt;content&lt;/code&gt; property of pseudo elements. As is clear from the name, it lets you specify content of the pseudo element.&lt;/p&gt;
&lt;p&gt;What was really great for me was the &lt;strong&gt;attr&lt;/strong&gt; function which gives you the power of grabbing the value of any attribute on the element and set it as the pseudo element&#39;s content. Isn&#39;t that really neat? So the meat of the library is this one line:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data-hint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And you are DONE!&lt;/p&gt;
&lt;p&gt;####4. CSS3 transitions
Finally to add some eye candy, the tooltips are loaded with subtle fade &amp;amp; translate effect using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/CSS/Tutorials/Using_CSS_transitions&quot;&gt;CSS3 Transitions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One thing to note here is that Transitions on pseudo elements work only in Firefox presently. But do not worry guyz...thanks to Elliott Sprehn, &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=92591&quot;&gt;the feature&lt;/a&gt; has arrived in Google Chrome 26 dev version and it&#39;s not too far when we&#39;ll all have it in the stable one too :)&lt;/p&gt;
&lt;p&gt;###What I learned&lt;/p&gt;
&lt;p&gt;If you are passionate about creating cool new stuff, you surely understand the importance of developing small side projects, something you can own completely. It teaches you a hell lot of things...not only about the tech side but about managing stuff from planning to releasing to maintaining a small product. You should probably read this &lt;a href=&quot;http://sachagreif.com/the-side-project-project/&quot;&gt;awesome post on creating side projects&lt;/a&gt; by &lt;a href=&quot;http://sachagreif.com/&quot;&gt;Sacha Grief&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While making &lt;strong&gt;hint.css&lt;/strong&gt; I too learned many things which I would like to share here.&lt;/p&gt;
&lt;p&gt;####SASS&lt;/p&gt;
&lt;p&gt;This was the first time I tried &lt;a href=&quot;http://sass-lang.com/&quot;&gt;SASS&lt;/a&gt;. SASS is basically a CSS preprocessor...meaning it provides you some great features (like variables, mixins etc) to write your CSS in a more efficient way.&lt;/p&gt;
&lt;p&gt;I had never felt the need of using a preprocessor ever. And same was with &lt;strong&gt;hint&lt;/strong&gt; also. If you happen to see the &lt;a href=&quot;http://codepen.io/chinchang/pen/lICaq&quot;&gt;original demo of &lt;strong&gt;hint.css&lt;/strong&gt;&lt;/a&gt; I released, it was written in CSS. Even when I started writing the actual library I was using plain CSS but then things started getting very repetitive and unmanageable.&lt;/p&gt;
&lt;p&gt;Adding any new type of tooltip required to change certain properties on all four tooltip positions (top, bottom, left and right) which I had to write again and again. Also at times, inconsistencies occurred with respect to color values and other static numbers used at different places. And hence I was forced to look into a preprocessor that could make me write smarter code.&lt;/p&gt;
&lt;p&gt;Basically its the &lt;em&gt;mixins&lt;/em&gt; (check out &lt;a href=&quot;https://github.com/chinchang/hint.css/blob/master/src/hint-color-types.scss&quot;&gt;src/color-types.scss&lt;/a&gt; for example) and &lt;em&gt;variables&lt;/em&gt; that made the whole library very easy to extend and consistent everywhere.&lt;/p&gt;
&lt;p&gt;####Grunt&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt; is a build tool basically made for JavaScript projects. I helps you create a build flow using variety of tasks it supports like concatenation, minification etc. As I started using SASS for &lt;strong&gt;Hint&lt;/strong&gt; it made sense to incorporate a build tool in my workflow and having a little experience of using Grunt in my previous game projects, I thought why not try it on a CSS project.&lt;/p&gt;
&lt;p&gt;It has worked quite well till now. I had to install some extra tasks for &lt;a href=&quot;https://github.com/sindresorhus/grunt-sass&quot;&gt;SASS compilation&lt;/a&gt; and &lt;a href=&quot;https://npmjs.org/package/grunt-contrib-mincss&quot;&gt;CSS minification&lt;/a&gt; as they don&#39;t come bundled by default with Grunt and now I simply run &lt;code&gt;grunt watch&lt;/code&gt; and all building happens silently in the background as I develop.&lt;/p&gt;
&lt;p&gt;####Release preparation&lt;/p&gt;
&lt;p&gt;This one is a tough and I would say a phase which needs more consideration and effort than the actual development itself.
Coding the library hardly took a day or two but rest of the work took around 300% of the already spent time and that includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Writing README for the repo&lt;/li&gt;
&lt;li&gt;Creating a project page with demo, usage explanation etc&lt;/li&gt;
&lt;li&gt;Writing a blog post about the project&lt;/li&gt;
&lt;li&gt;Making sure I did not miss anything&lt;/li&gt;
&lt;li&gt;Finally releasing!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;During this I became better at writing (I only love writing code though) and managing multiple tasks.&lt;/p&gt;
&lt;p&gt;####More CSS knowledge
Last but not the least, as I was working on a CSS library I came to know more about it as mentioned earlier. CSS is really beautiful :)&lt;/p&gt;
&lt;p&gt;###In the end&lt;/p&gt;
&lt;p&gt;Finally &lt;strong&gt;Hint.css&lt;/strong&gt; was released as an Open Source project on Github. But it didn&#39;t stop there. People have been liking it and started using and &lt;a href=&quot;https://github.com/chinchang/hint.css/pulls&quot;&gt;contributing to it&lt;/a&gt; which marks the beginning of the final phase of a software: Maintenance. To keep a library fresh you need to constantly keep it up to date with latest technology, keep adding new features your users want, fix bugs that get reported regularly. And all this in very organized and planned manner so that the user&#39;s know exactly what changed when, whats coming up etc. In short, everyone should be able to track the project without difficulties.&lt;/p&gt;
&lt;p&gt;Doing all this is fun. I am getting to know GIT better and better now that I have started using branches, merging etc a lot. I only hope I don&#39;t face the &lt;a href=&quot;http://fat.github.com/slides-os-guilt/&quot;&gt;Cute Puppy Syndrome&lt;/a&gt; (a term coined by &lt;a href=&quot;https://twitter.com/fat&quot;&gt;@fat&lt;/a&gt;) in future :P&lt;/p&gt;
&lt;p&gt;Talking about issues, one thing that I have been &lt;a href=&quot;https://github.com/chinchang/hint.css/issues/12&quot;&gt;hearing a lot from people&lt;/a&gt; is that BEM naming convention is kind of an overkill, specifically in &lt;strong&gt;Hint&lt;/strong&gt;. For example people prefer &lt;code&gt;hint-top&lt;/code&gt; class over &lt;code&gt;hint--top&lt;/code&gt;. I am still thinking over this if BEM was at all necessary or is really an overkill in my library. Though I would really appreciate if BEM masters could really comment on this.&lt;/p&gt;
&lt;p&gt;Would love to hear your comments, suggestion or anything you feel like saying about my work, this post...anything.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/lab/hint/&quot; class=&quot;button button-big&quot;&gt;Take me to Hint.css&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;P.S. Discussion on &lt;a href=&quot;http://news.ycombinator.com/item?id=5164029&quot;&gt;Hacker News&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>[Tutorial] Win8 HTML5 app development- II</title>
		<link href="http://kushagragour.in/blog/2012/12/win8-html5-dev-part2/"/>
		<updated>2012-12-02T00:00:00+05:30</updated>
		<id>http://kushagragour.in/blog/2012/12/win8-html5-dev-part2/</id>
		<content type="html">&lt;p&gt;Finally I got the opportunity to write the second part of the tutorial series on HTML5 game development for Windows 8.
The first part &lt;a href=&quot;http://kushagragour.in/blog/2012/09/win8-html5-dev-part1/&quot;&gt;can be read here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Okay, so lets see what are we going to do today.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First we&#39;ll port my game &lt;a href=&quot;http://kushagragour.in/Bouncy_HTML5/&quot;&gt;Bouncy&lt;/a&gt; to a Visual Studio 2012 project&lt;/li&gt;
&lt;li&gt;Add a paddle below he ball which will be controlled by &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/apps/windows.devices.sensors.inclinometer&quot; trget=&quot;_blank&quot;&gt;Inclinometer&lt;/a&gt; sensor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lets begin!&lt;/p&gt;
&lt;p&gt;###PART 2: Writing your first sensor enabled Windows Store game###&lt;/p&gt;
&lt;p&gt;To begin with the porting, we need the game source first which we&#39;ll fetch by cloning the &lt;a href=&quot;https://github.com/chinchang/Bouncy_HTML5&quot;&gt;game repository on github&lt;/a&gt;. I am using terminal to do so but you could use any possible way to clone it. If you are using the terminal too, run the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; clone git@github.com:chinchang/Bouncy_HTML5.git&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After you clone the repo, you should have a directory called &lt;strong&gt;Bouncy_HTML5&lt;/strong&gt; on your system containing 4 files out which we require &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;game.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;####Porting game to Visual Studio:####&lt;/p&gt;
&lt;p&gt;Now lets fire up Visual Studio 2012. Once you have it running create a new project and select the &lt;strong&gt;Javascript &amp;gt; Windows Metro style &amp;gt; Blank App&lt;/strong&gt; template for your project.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/images/html5-sensor-tut-ss1.png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/html5-sensor-tut-ss1.png&quot; alt=&quot;Blank App&quot; title=&quot;Select a Blank App&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This will create a basic setup for an Windows Store HTML5 app ready to run on Window 8. You can check out the files that are created by the template for you in the right solution panel:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/images/html5-sensor-tut-ss2.png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/html5-sensor-tut-ss2.png&quot; alt=&quot;Solution panel&quot; title=&quot;Solution panel&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Our next step is to integrate our 2 files into the project. So basically first we integrate the markup (&lt;code&gt;index.html&lt;/code&gt;) and then the JavaScript (&lt;code&gt;game.js&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Open the &lt;code&gt;default.html&lt;/code&gt; file present in your Visual Studio project and delete all the HTML present inside the &lt;code&gt;BODY&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;Now open up &lt;code&gt;Bouncy_HTML5/index.html&lt;/code&gt; in your favourite text-editor (BTW, I use the awesome &lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;Sublime Text 2&lt;/a&gt;).
From there you only need to copy 2 lines (Yeah, just 2. Rest is all the extra stuff on the page) into &lt;code&gt;default.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Copy the following line:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;canvas&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;640&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;480&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style-attr language-css&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&quot;&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt; &lt;span class=&quot;token property&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1px solid #AAA&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;canvas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and paste it inside the &lt;code&gt;BODY&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;Now back in the &lt;code&gt;index.html&lt;/code&gt; file copy the following:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text/javascript&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;game.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and paste it where other &lt;code&gt;SCRIPT&lt;/code&gt; tags are present in &lt;code&gt;default.html&lt;/code&gt;. One thing you need to change here is the script path as our JavaScript file will now go in a sub-folder named &lt;strong&gt;js&lt;/strong&gt;. Change the line to:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text/javascript&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/js/game.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are done with our HTML. Over to Javascript, developer.&lt;/p&gt;
&lt;p&gt;Next we&#39;ll add &lt;code&gt;Bouncy_HTML5/game.js&lt;/code&gt; to our project. Right-click on the &lt;strong&gt;js&lt;/strong&gt; folder in the solution pane. Select &lt;strong&gt;Add &amp;gt; Existing Item&lt;/strong&gt; then browse to &lt;code&gt;Bouncy_HTML5/game.js&lt;/code&gt; and click Add as shown below:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/images/html5-sensor-tut-ss3.png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/html5-sensor-tut-ss3.png&quot; alt=&quot;Add file to project&quot; title=&quot;Add file to project&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Congratz, that file has now become part of your project. Now you can close the text editor and you have nothing to do with the Bouncy_HTML5 folder. You can delete it if you wish.&lt;/p&gt;
&lt;p&gt;If you try to run the project by pressing F5, the game will run just fine. But we&#39;ll make a small tweak here.&lt;/p&gt;
&lt;p&gt;If you happen to notice in &lt;code&gt;game.js&lt;/code&gt;, we call a function called &lt;code&gt;init()&lt;/code&gt; on window load event (Line 193). But in our new project we don&#39;t explicitly need to listen to window load event. In &lt;code&gt;default.js&lt;/code&gt; file that was created with the project you&#39;ll see a code that looks like this around Line 13:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// TODO: This application has been newly launched. Initialize&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// your application here.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is essentially a position where we can execute any of our initialization code. But the issue here is that the &lt;code&gt;init()&lt;/code&gt; function is inside an anonymous function and hence not available to outer world. It has to be first put in global scope to be able to call from &lt;code&gt;default.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Back in &lt;code&gt;game.js&lt;/code&gt;, modify the following line:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;load&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; init&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// create a global game object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;game &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;game &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// set a reference to init function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;game&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;init &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; init&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now the function is accessible in global scope using &lt;code&gt;window.game.init()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Switch back to &lt;code&gt;default.js&lt;/code&gt; and call the &lt;code&gt;init()&lt;/code&gt; function at the place we saw earlier. Your &lt;code&gt;onactivated&lt;/code&gt; function should look like this now:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;onactivated&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;detail&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;kind &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; activation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ActivationKind&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;launch&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      args&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;detail&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;previousExecutionState &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      activation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ApplicationExecutionState&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;terminated&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token comment&quot;&gt;// TODO: This application has been newly launched. Initialize&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token comment&quot;&gt;// your application here.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;game&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token comment&quot;&gt;// TODO: This application has been reactivated from suspension.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token comment&quot;&gt;// Restore application state here.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    args&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setPromise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;WinJS&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;processAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To verify your change, run the game by pressing F5 and it should work as before.&lt;/p&gt;
&lt;p&gt;####Adding the paddle:####
Now that our game is completely ported we&#39;ll add paddle to it which will use the &lt;strong&gt;Inclinometer&lt;/strong&gt; sensor to move.&lt;/p&gt;
&lt;p&gt;As this tutorial doesn&#39;t focus on game development, rather using sensors for Windows Store game, we&#39;ll not dive into the code to implement the paddle. Simply download the new &lt;code&gt;game-with-paddle.js&lt;/code&gt; file and replace the &lt;code&gt;game.js&lt;/code&gt; code with its code:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/uploads/2012/game-with-paddle.js&quot; target=&quot;_blank&quot; class=&quot;button button-big&quot;&gt;Download new game.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Run your project and you should see a paddle on the screen and the balls bouncing on it. Lets make our paddle move, shall we?&lt;/p&gt;
&lt;p&gt;####Enabling Inclinometer to move paddle:####
All the sensors in Windows Runtime (WinRT) are available under the namespace &lt;code&gt;Windows.Devices.Sensors&lt;/code&gt;. The class we need to use is &lt;code&gt;Windows.Devices.Sensors.Inclinometer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;game.js&lt;/code&gt;, modify the following line:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; ball1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ball2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; paddle&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; ball1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  ball2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  paddle&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  sensor&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  max_roll &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which creates a new variable to reference our sensor.&lt;/p&gt;
&lt;p&gt;Next, in the &lt;code&gt;init()&lt;/code&gt; function, put the following lines:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// get the reference to the Inclinometer sensor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  sensor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Windows&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Devices&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Sensors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Inclinometer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;You don&#39;t have sensor support&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point we have initialized the Inclinometer. Now we need to read it to make the paddle move. Modify the paddle&#39;s &lt;code&gt;update()&lt;/code&gt; function to following:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;Paddle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dt&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sensor&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; reading &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sensor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCurrentReading&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reading&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;canvas&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; reading&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;rollDegrees &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; max_roll&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All we do above is read the sensor&#39;s present reading (we are using the device roll amount here) and position the paddle according to it.&lt;/p&gt;
&lt;p&gt;Run your project now and try tilting your Windows 8 device. Voila! You can now control the paddle using the device&#39;s Inclinometer sensor (if one exists). You can download the Visual Studio project at the following link:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/uploads/2012/bouncy-sensor.zip&quot; target=&quot;_blank&quot; class=&quot;button button-big&quot;&gt;Download Project&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We are done with our first sensor enabled game ready to be put up on the Windows Store. If I find some more interesting stuff about Windows Store app development, I&#39;ll share it in my next post :) Till then, here is a screenshot of the game in action:&lt;/p&gt;
&lt;img src=&quot;http://kushagragour.in/images/html5-sensor-tut-ss4.png&quot; alt=&quot;Game in action&quot;&gt;
&lt;p&gt;So go now and make your games sensor enabled and rule the world!&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>[Tutorial] Win8 HTML5 app development- I</title>
		<link href="http://kushagragour.in/blog/2012/09/win8-html5-dev-part1/"/>
		<updated>2012-09-22T00:00:00+05:30</updated>
		<id>http://kushagragour.in/blog/2012/09/win8-html5-dev-part1/</id>
		<content type="html">&lt;p&gt;Hola!&lt;/p&gt;
&lt;p&gt;I recently received a prototype of the next generation Ultrabook device from Intel to support my Windows 8 app developments which had Windows 8 Release Preview installed.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/images/ubook.png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/ubook.jpg&quot; alt=&quot;Ultrabook&quot; title=&quot;Next-gen ultrabook&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Excited about the new capabilities the device offers, I thought of starting by porting one my previous games to Windows 8. I started looking on forums, communities etc to get some &#39;getting started&#39; guides on developing HTML5 apps for Windows 8 RT which is specifically for touch device like tablets. Unfortunately, there isn&#39;t much information for beginners...or may be I couldn&#39;t find some. But anyways, the only option that was left was to explore stuff on my own.&lt;/p&gt;
&lt;p&gt;This tutorial series is basically a documentation about my experience of the process of porting one of my HTML5 games (&lt;a href=&quot;https://github.com/chinchang/Bouncy_HTML5&quot;&gt;HTML5 Bouncy&lt;/a&gt;) to Windows 8 and use its accelerometer capability to add some extra control.
The tutorial series isn&#39;t pre-decided as to how long it would be as the app is still under development. I&#39;ll share my experience here as and when there is some progress.&lt;/p&gt;
&lt;p&gt;###PART 1: Getting the dev environment ready###&lt;/p&gt;
&lt;p&gt;Okay, so to develop apps for Windows 8 we need Microsoft Visual 2012 which supports Metro style apps. So I headed over to the &lt;a href=&quot;http://www.microsoft.com/visualstudio/eng/downloads&quot;&gt;Visual Studio download page&lt;/a&gt; as prescribed &lt;a href=&quot;http://software.intel.com/en-us/blogs/2012/07/13/getting-started-with-ultrabook-development&quot;&gt;by few&lt;/a&gt; &lt;a href=&quot;http://blogs.msdn.com/b/jennifer/archive/2012/06/19/developing-a-windows-8-metro-app-part-2-getting-started.aspx&quot;&gt;articles&lt;/a&gt; I read.&lt;/p&gt;
&lt;p&gt;Then I downloaded &lt;strong&gt;Visual Studio Express 2012 for Windows 8&lt;/strong&gt; from there. But upon installing, it gave a weird error:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Windows 8 Release Preview does not have the required .NET framework 4.5.50709&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well, that was annoying as I expected my windows 8 to come bundled with all the dependencies. My next step was to obviously search the Microsoft website for the required .NET updates. I even found some updates to .NET but each one on installation gave the message that &lt;strong&gt;&lt;em&gt;I already had the same .NET version installed&lt;/em&gt;&lt;/strong&gt;. That was more weird.&lt;/p&gt;
&lt;p&gt;After some googling about the issue, I hit a &lt;a href=&quot;http://stackoverflow.com/questions/12389297/unable-to-install-visual-studio-professional-2012-on-windows-8-cp-and-also-not-o&quot;&gt;Stackoverflow page&lt;/a&gt; that had the information I wanted. So it turns out that Visual Studio cannot be installed on Windows 8 Release Preview due to some restrictions by Microsoft. It can be installed only on Windows 8 RTM. Besides this, if you want to have Visual Studio 2012 for Win 8 RP, you can do so using Visual Studio 2012 Release Candidate. God bless Microsoft!&lt;/p&gt;
&lt;p&gt;So basically I had 2 options now to choose from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get Windows 8 RTM&lt;/li&gt;
&lt;li&gt;Get Visual Studio 2012 RC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And obviously I picked the latter as whose gonna download and install Window 8 :) Finally &lt;a href=&quot;http://www.microsoft.com/en-us/download/details.aspx?id=29915&quot;&gt;downloaded Visual Studio 2012 RC&lt;/a&gt; and it installed without any issues on my Ultrabook device. A moment of rejoice!&lt;/p&gt;
&lt;p&gt;And there I had in front of my eyes, the beautiful new UI of Micorsoft Visual Studio 2012 inspired by the Metro view :D It was simply neat and clean.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/images/vs2012_start_screen.png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/vs2012_start_screen.png&quot; alt=&quot;Visual Studio 2012&quot; title=&quot;Visual Studio 2012 start screen&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just to try out things, I made a new Javascript Blank Project which provides you with a &lt;code&gt;default.html&lt;/code&gt;, &lt;code&gt;default.js&lt;/code&gt; and &lt;code&gt;default.css&lt;/code&gt; files with some basic setup code. I added some code to make a simple Hello World app:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;hello-world&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Hello World!&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;#hello-world&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; center&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 220px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 300px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And I have my first hello world HTML5 window 8 app ready :)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/images/helloworld_win8.png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/helloworld_win8.png&quot; alt=&quot;Hello World&quot; title=&quot;Hello World!&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;###Whats up next?###
It seems the dev environment is setup now. Next, this is what I am going to do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Port &lt;a href=&quot;https://github.com/chinchang/Bouncy_HTML5&quot;&gt;HTML5 Bouncy&lt;/a&gt; to Visual Studio (shouldn&#39;t be much of pain)&lt;/li&gt;
&lt;li&gt;Explore how to use device accelerometer with Javascript&lt;/li&gt;
&lt;li&gt;Add some features to the game to exploit accelerometer capabilities&lt;/li&gt;
&lt;li&gt;May be something more...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope this series is useful to someone starting Windows 8 app development for the next generation Ultrabooks.&lt;/p&gt;
&lt;p&gt;Till the next part, cya!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>[Tutorial] Rotating earth using pure CSS</title>
		<link href="http://kushagragour.in/blog/2012/09/rotating-earth-using-css/"/>
		<updated>2012-09-16T00:00:00+05:30</updated>
		<id>http://kushagragour.in/blog/2012/09/rotating-earth-using-css/</id>
		<content type="html">&lt;p&gt;Recently after seeing a pen on &lt;a target=&quot;_blank&quot; href=&quot;http://www.codepen.io/&quot;&gt;codepen&lt;/a&gt; by &lt;a href=&quot;http://codepen.io/jackrugile/pen/sadvF&quot;&gt;Jack Rugile&lt;/a&gt; and a creation on &lt;a href=&quot;http://www.cssdeck.com/&quot;&gt;CSSDeck&lt;/a&gt; by &lt;a href=&quot;http://cssdeck.com/labs/animated-map-icon&quot;&gt;Tim Holman&lt;/a&gt;, I thought why not use the two concepts to come up with something interesting. An illusion of a 3D rotating planet using just CSS. And so I &lt;a href=&quot;http://codepen.io/chinchang/pen/ygHBc&quot;&gt;hacked down a pen&lt;/a&gt; (this does a little more than mentioned, not nicely enough though).&lt;/p&gt;
&lt;div class=&quot;talign-center&quot;&gt;
	&lt;a href=&quot;http://codepen.io/chinchang/pen/xCkus&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/css-rotating-earth.jpeg&quot; alt=&quot;Rotating earth in CSS&quot; width=&quot;200&quot; height=&quot;200&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;I thought may be I should share the little CSS tricks being used in this CSS stuff to create the illusion. And here I am with a short walkthrough. Lets begin.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://codepen.io/chinchang/pen/xCkus&quot; target=&quot;_blank&quot; class=&quot;button button-big&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This demo uses a single &lt;code&gt;div&lt;/code&gt; tag for the HTML. So lets start by creating a &lt;code&gt;div&lt;/code&gt; tag with an ID &lt;code&gt;earth&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;earth&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thats it. Our markup is done. Time for some CSS now. Lets break this part into numbered steps.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;STEP 1&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Lets give our earth some dimensions. Give it a &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; of 100 pixels. Also give a temporary &lt;code&gt;background&lt;/code&gt; of blue color just to know what it is becoming.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;#earth&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; blue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;STEP 2&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Earth isn&#39;t all that square for sure. Lets make it a perfect circle by giving it a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/CSS/border-radius&quot;&gt;&lt;code&gt;border-radius&lt;/code&gt;&lt;/a&gt; of 50%.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;#earth&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; blue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;STEP 3&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Much better now. But still doesn&#39;t looks like our earth. Yeah, you&#39;re right...we need a texture. Lets pick an earth texture to put on our present blue circle. I have selected &lt;a href=&quot;http://www.noirextreme.com/digital/Earth-Color4096.jpg&quot;&gt;this image&lt;/a&gt; here for this tutorial (you could use any of your choice). Set the image as the background of our &lt;code&gt;div&lt;/code&gt; instead of the blue color we have.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;#earth&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;url(http://www.noirextreme.com/digital/Earth-Color4096.jpg)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Ahh, all we see is a blue color still. Why? Well that is because the texture we are using is quite big for a 100x100 earth. We need to scale down the background a bit. Lets try giving it a &lt;code&gt;background-size&lt;/code&gt; of something according to our dimensions. I find 210 pixels to be a fit here.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;#earth&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;url(http://www.noirextreme.com/digital/Earth-Color4096.jpg)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 210px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Seems better. But our earth still looks all flat. Time to give it some 3D feel by adding some lighting. For this we use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/CSS/box-shadow&quot;&gt;&lt;code&gt;box-shadow&lt;/code&gt;&lt;/a&gt; CSS property. Give it an inner blackish shadow from left.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;#earth&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;url(http://www.noirextreme.com/digital/Earth-Color4096.jpg)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 210px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inset 16px 0 40px 3px black&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make it more realistic, add another white shadow from right side, a subtle one with some opacity.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;#earth&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;url(http://www.noirextreme.com/digital/Earth-Color4096.jpg)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 210px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inset 16px 0 40px 3px &lt;span class=&quot;token function&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0, 0, 0&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;, inset -3px 0 6px 2px &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;255, 255, 255, 0.2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Step 6&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Now that looks like our earth. One final thing we will do is...rotate it. How? &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/CSS/Using_CSS_animations&quot;&gt;CSS Animations&lt;/a&gt; to the rescue. We first need to define our own animation keyframes which essentially means telling which CSS property will change to what value and at what time. But wait! What CSS property can we use to make a rotation animation?&lt;/p&gt;
&lt;p&gt;Well, the rotation illusion is actually created by simply scrolling the background image horizontally which is by default tiled both horizontally and vertically. Hence we make use of &lt;code&gt;background-position-x&lt;/code&gt; CSS to do so. Add the following CSS to define the animation keyframes which we call &lt;code&gt;rotate&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@keyframes&lt;/span&gt; rotate&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token selector&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;background-position-x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token selector&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;background-position-x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 210px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So here we are defining our animation to change the &lt;code&gt;background-position&lt;/code&gt; &lt;code&gt;from&lt;/code&gt; 0px when animation cycle starts &lt;code&gt;to&lt;/code&gt; 210px when cycle ends. Why we chose 210px for the final value? Remember that is the size we set for our background-image. So for a seamless scrolling we shift the background image equal to its width.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 7&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Nothing happens though because we have not yet used the above defined animation. To use it, we set the &lt;code&gt;animation-name&lt;/code&gt; CSS property to our animation name (rotate).&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;#earth&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;url(http://www.noirextreme.com/digital/Earth-Color4096.jpg)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 210px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inset 16px 0 40px 3px &lt;span class=&quot;token function&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0, 0, 0&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;, inset -3px 0 6px 2px &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;255, 255, 255, 0.2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;animation-name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; rotate&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we define the time it should take for one animation cycle using &lt;code&gt;animation-duration&lt;/code&gt; property. Set a value of 4 seconds for the same.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;#earth&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;url(http://www.noirextreme.com/digital/Earth-Color4096.jpg)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 210px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inset 16px 0 40px 3px &lt;span class=&quot;token function&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0, 0, 0&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;, inset -3px 0 6px 2px &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;255, 255, 255, 0.2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;animation-name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; rotate&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;animation-duration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 4s&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice here how the animation plays just once and stops. We must tell the animation to play in an infinte loop using the &lt;code&gt;animation-iteration-count&lt;/code&gt; property.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;#earth&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;url(http://www.noirextreme.com/digital/Earth-Color4096.jpg)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 210px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inset 16px 0 40px 3px &lt;span class=&quot;token function&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0, 0, 0&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;, inset -3px 0 6px 2px &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;255, 255, 255, 0.2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;animation-name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; rotate&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;animation-duration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 4s&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;animation-iteration-count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; infinite&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One final adjustment to make the animation smooth, set the &lt;code&gt;animation-timing-function&lt;/code&gt; to &lt;code&gt;linear&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;#earth&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;url(http://www.noirextreme.com/digital/Earth-Color4096.jpg)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 210px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inset 16px 0 40px 3px &lt;span class=&quot;token function&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0, 0, 0&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;, inset -3px 0 6px 2px &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;255, 255, 255, 0.2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;animation-name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; rotate&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;animation-duration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 4s&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;animation-iteration-count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; infinite&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;animation-timing-function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; linear&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we are done! You may give the body a black background to get a feel of space. Also you can make different planets by just changing the background texture. So go and make some cool CSS planets.&lt;/p&gt;
&lt;p&gt;Finally, some light discussion about the demo &lt;a href=&quot;http://news.ycombinator.com/item?id=4498860&quot;&gt;on Hacker News&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Earth image credits: &lt;a href=&quot;http://www.noirextreme.com/earth&quot;&gt;http://www.noirextreme.com/earth&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>I complete an year at Wingify</title>
		<link href="http://kushagragour.in/blog/2012/08/one-year-at-wingify/"/>
		<updated>2012-08-25T00:00:00+05:30</updated>
		<id>http://kushagragour.in/blog/2012/08/one-year-at-wingify/</id>
		<content type="html">&lt;p&gt;Today is quite a big day for me. Last year on this very date, I joined my first job at a startup called &lt;strong&gt;&lt;a href=&quot;http://www.wingify.com/&quot;&gt;Wingify&lt;/a&gt;&lt;/strong&gt; which was not much known name to me at that time. And today I complete an year working at Wingify and immensely proud and privileged of having been part of a bunch of talented geeks!&lt;/p&gt;
&lt;p&gt;&lt;strong id=&quot;one-year&quot;&gt;1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Writing this post, lots of memories of the past year strike my mind (whatever my short-term memory can recall). I still remember that day when I was about to join some other company in Bangalore and was all set to leave on Sunday. And two days before that I came to know about a startup called Wingify in New Delhi and that it was hiring. I was called for an interview the next day at Wingify&#39;s one room office back then, where I had the geekiest (and longest) interview of my life :P But seriously it was so much fun talking and discussing stuff at that 3 hour long interview which was taken by the geeky CTO of Wingify, &lt;a href=&quot;https://www.facebook.com/sparshgupta&quot;&gt;Sparsh Gupta&lt;/a&gt; (btw, our cool CEO, &lt;a href=&quot;http://paraschopra.com/&quot;&gt;Paras Chopra&lt;/a&gt;, was out for holidays at that time). Irrespective of my selection, I was happy to have talked to some awesome people that day. But thankfully I was selected for the job that very day (night to be precise) and there, I was saved from the employee exploitation machine I was going into :P We were just 7 people then.&lt;/p&gt;
&lt;p&gt;Since then, it has been a journey filled with lots of learning, making awesome stuff and wonderful parties :)
Being a startup I have got the opportunity to work in various domains here which has really helped me grow, learn new things and become better at whatever I do. Here, I have created frontends, backends, &lt;a href=&quot;http://team.wingify.com/our-christmas-logo&quot;&gt;doodles&lt;/a&gt;, christmas cards (this was a &lt;a href=&quot;http://team.wingify.com/greeting-card-day-at-wingify-office&quot;&gt;tough job&lt;/a&gt; for our team) and what not. And the most important thing which sets Wingify apart from the rest is the creative freedom and casual environment it provides to the team which lets us create better and better product for our customers.&lt;/p&gt;
&lt;p&gt;Talking about the past year, one thing that I can&#39;t forget is the &lt;a href=&quot;http://team.wingify.com/thailand-trip-pictures&quot;&gt;crazy trip to Thailand&lt;/a&gt; that we had on Christmas.&lt;/p&gt;
&lt;img src=&quot;http://kushagragour.in/images/team-at-thailand.jpg&quot; title=&quot;Team in Thailand&quot;&gt;
&lt;p&gt;It was a wonderful experience going out with the team and I thank Wingify for that. There are a lot of short stories of that trip but lets not discuss them here :)&lt;/p&gt;
&lt;p&gt;All in all, I feel really fortunate to be a part of Wingify and to be able to work with some freaky hackers here building a &lt;a href=&quot;http://visualwebsiteoptimizer.com/&quot;&gt;world class product&lt;/a&gt; that our customers love. Its altogether a different feeling to be in a small team (we are 10 people now) and share huge achievements together (we recently hit 1500+ signups and shifting to a better &amp;amp; bigger office soon). Hope to make more neat and wonderful stuff here.&lt;/p&gt;
&lt;p&gt;And hey, we are always looking out for great talent out there. So if you think you have got it, &lt;a href=&quot;http://visualwebsiteoptimizer.com/careers.php&quot;&gt;reach out to us&lt;/a&gt; and be a part of this place called &lt;strong&gt;Wingify&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;EDIT: And as an icing on the cake, I received a &lt;a href=&quot;https://www.facebook.com/photo.php?fbid=4551440628203&quot; target=&quot;_blank&quot;&gt;touch ultrabook&lt;/a&gt; from Intel today :D Yuhooo!!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thanks Wingify!&lt;/strong&gt;&lt;/p&gt;
&lt;style type=&quot;text/css&quot;&gt;
#one-year { display: inline-block; font-size: 120px; margin-left: 70px; text-shadow: 0 1px 1px #6E7231, 0 2px 1px #6E7231, 0 3px 1px #6E7231, 0 4px 1px #6E7231, 0 5px 1px #6E7231, 0 6px 1px #6E7231, 0 6px 1px rgba(0, 0, 0, 0.9), 0 6px 13px rgba(0, 0, 0, 0.4); -webkit-transition: 300ms margin-left; -moz-transition: 300ms margin-left; }
#one-year:before { content: &#39;year&#39;; font-size: 25px; position: relative; left: 133px; bottom: 60px; }
#one-year:after { content: &#39;@ Wingify&#39;; font-size: 40px; position: relative; left: 10px; bottom: 20px; }
#one-year:hover { margin-left: 80px; }
&lt;/style&gt;
</content>
	</entry>
	
	<entry>
		<title>Hello World!</title>
		<link href="http://kushagragour.in/blog/2012/07/hello-world/"/>
		<updated>2012-07-28T00:00:00+05:30</updated>
		<id>http://kushagragour.in/blog/2012/07/hello-world/</id>
		<content type="html">&lt;p&gt;Hey!&lt;/p&gt;
&lt;p&gt;As a custom, I write my first post on my new blog (powered by Jekyll and Github).&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; str &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;ll be soon writing a post about my experience with switching from wordpress to really awesome Jekyll.&lt;/p&gt;
&lt;p&gt;Stay tuned.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>New web experiments!</title>
		<link href="http://kushagragour.in/blog/2012/07/new-web-experiments/"/>
		<updated>2012-07-01T10:00:37+05:30</updated>
		<id>http://kushagragour.in/blog/2012/07/new-web-experiments/</id>
		<content type="html">&lt;p&gt;Hey everyone!&lt;/p&gt;
&lt;p&gt;This is my post after a long long time. Well, I am here to introduce 2 recent experimental web stuff I developed just to get the hang of HTML5, CSS3 and coffeescript and I must tell you that working with these super-awesome web technologies has been a great experience. They open a whole new world of possibilities where imagination can create mind-blowing things.&lt;/p&gt;
&lt;p&gt;#&lt;a href=&quot;http://kushagragour.in/lab/isoblocks/&quot;&gt;ISO-BLOCKS&lt;/a&gt;#&lt;/p&gt;
&lt;p&gt;**&lt;a href=&quot;http://kushagragour.in/images/ISO-BLOCKS-An-eye-candy-CSS3-isometric-text-library..png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/ISO-BLOCKS-An-eye-candy-CSS3-isometric-text-library.-300x148.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;
**&lt;/p&gt;
&lt;p&gt;The first one of them is actually a small library used to create cool looking isometric text in the browser using CSS3 &lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en/CSS/CSS_transitions/&quot;&gt;transitions&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en/CSS/transform&quot;&gt;transforms&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;###&lt;a href=&quot;http://kushagragour.in/lab/isoblocks/&quot;&gt;Try out ISO-BLOCKS&lt;/a&gt;###&lt;/p&gt;
&lt;p&gt;#&lt;a href=&quot;http://kushagragour.in/lab/picssel-art/&quot;&gt;piCSSel-art&lt;/a&gt;#&lt;/p&gt;
&lt;p&gt;**&lt;a href=&quot;http://kushagragour.in/images/picssel-ss.png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/picssel-ss-244x300.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;
**&lt;/p&gt;
&lt;p&gt;This is a recent thing I have been working on. The inspiration behind this was the space invader made &lt;a href=&quot;http://css-tricks.com/examples/ShapesOfCSS/&quot;&gt;here&lt;/a&gt; using CSS &lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en/CSS/box-shadow&quot;&gt;box-shadow&lt;/a&gt;&lt;/em&gt; seeing which I though of recreating my complete site with zero images using only CSS pixel art. And so &lt;strong&gt;piCSSel-art&lt;/strong&gt; was born.&lt;/p&gt;
&lt;p&gt;Having the app done, I&#39;ll can now start working on my new website design which is gonna be hell lot of fun with this.&lt;/p&gt;
&lt;p&gt;###&lt;a href=&quot;http://kushagragour.in/lab/picssel-art/&quot;&gt;Try out piCSSel-art&lt;/a&gt;###&lt;/p&gt;
&lt;p&gt;Both the above experiments are in the open-source world for anyone who wants to tinker with them. So fork and play with them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ISO-BLOCKS&lt;/strong&gt;: &lt;a href=&quot;https://github.com/chinchang/IsoBlocks&quot;&gt;https://github.com/chinchang/IsoBlocks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;piCSSel-art&lt;/strong&gt;: &lt;a href=&quot;https://github.com/chinchang/picssel-art&quot;&gt;https://github.com/chinchang/picssel-art&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let me know your thoughts, comments, suggestions on them.&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Ludum Dare 23!</title>
		<link href="http://kushagragour.in/blog/2012/04/ludum-dare-23/"/>
		<updated>2012-04-30T06:46:08+05:30</updated>
		<id>http://kushagragour.in/blog/2012/04/ludum-dare-23/</id>
		<content type="html">&lt;p&gt;Hey everyone!&lt;/p&gt;
&lt;p&gt;Last weekend was just super awesome...it was &lt;strong&gt;&lt;a href=&quot;http://www.ludumdare.com/compo/&quot;&gt;Ludum Dare&lt;/a&gt;&lt;/strong&gt; 23 - The ultimate 48 hour compo. The theme was &#39;Tiny World&#39; and I was in this time (my 2nd LD). I chose to make a game on flash platform using the &lt;strong&gt;&lt;a href=&quot;http://www.flashpunk.com/&quot;&gt;Flashpunk&lt;/a&gt;&lt;/strong&gt; game library. The game is called &lt;em&gt;SAVE ME&lt;/em&gt; in which you control a cute alien which is attacked by some evil species. You can jump on planets and even hop from one planet to another collecting the game power-ups.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/images/ld23_ss1.png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/ld23_ss1.png&quot; width=&quot;220&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;http://kushagragour.in/images/ld23_ss1.png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/ld23_ss2.png&quot; width=&quot;220&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;http://kushagragour.in/images/ld23_ss1.png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/ld23_ss3.png&quot; width=&quot;220&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;http://kushagragour.in/images/ld23_ss1.png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/ld23_ss4.png&quot; width=&quot;220&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some points about this LD for me were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Gave more time and priority to gameplay.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Drew quite a lot pixel art for the first time (it was fun).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tried some new game mechanics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integrated almost all game elements (sounds really matter).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;&lt;a href=&quot;http://www.ludumdare.com/compo/ludum-dare-23/?action=preview&amp;amp;uid=4201&quot;&gt;Play and rate&lt;/a&gt;&lt;/strong&gt; my entry.&lt;/h2&gt;
&lt;p&gt;Now that the compo is over, I have played around 60 entries out which here are my best picks (in no order):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;**&lt;a href=&quot;http://www.ludumdare.com/compo/ludum-dare-23/?action=preview&amp;amp;uid=2982&quot;&gt;Memento XII - deepnight&lt;/a&gt;: **As always, this entry by deepnight has mind blowing graphics. The pixel art is really good and gives a very nice feel to the game. Though being a &lt;em&gt;point and click adventure&lt;/em&gt; type, I was not that a fan of the gameplay.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.ludumdare.com/compo/ludum-dare-23/?action=preview&amp;amp;uid=528&quot;&gt;Astro Break - hulahulahest&lt;/a&gt;&lt;/strong&gt;: This was a really well made contra style game. I loved the sprites and the whole idea of having a shoot&#39;emup on a lil planet was greet. A game to play for powerups!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.ludumdare.com/compo/ludum-dare-23/?action=preview&amp;amp;uid=11306&quot;&gt;Soul Searchin&#39; - MaximSchoemaker&lt;/a&gt;&lt;/strong&gt;: A 100% into the the theme entry. A very well executed idea where the player can be shrunk and grown to clear levels inside levels...A nice level design too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;**&lt;a href=&quot;http://www.ludumdare.com/compo/ludum-dare-23/?action=preview&amp;amp;uid=19&quot;&gt;Nook - PoV&lt;/a&gt;: **Another shrink/grow type jam entry which wonderful graphics and animation. The game is fun to play and effects are neat.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So go ahead, play them, rate them and be cool :)&lt;/p&gt;
&lt;p&gt;If you wanna check out my game&#39;s source, it can be found on &lt;strong&gt;&lt;a href=&quot;https://github.com/chinchang/LD23&quot;&gt;github&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Till next time, cya!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Copter clone- open source on github</title>
		<link href="http://kushagragour.in/blog/2012/01/copter-clone-open-source-on-github/"/>
		<updated>2012-01-02T01:36:20+05:30</updated>
		<id>http://kushagragour.in/blog/2012/01/copter-clone-open-source-on-github/</id>
		<content type="html">&lt;p&gt;Hey everyone&lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;HAPPY NEW YEAR TO ALL!&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;It has been an awesome year in 2011, with many things happening as expected and many unexpectedly. But overall...superb.&lt;/p&gt;
&lt;p&gt;The first news of 2012 from my side is that I have put one of my alpha games on github. Its basically a clone of the very famous copter game by seethru. You can fork the game &lt;strong&gt;&lt;a href=&quot;https://github.com/chinchang/Copter&quot;&gt;HERE&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chinchang/Copter&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/copter-300x207.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So fork it, hack it and enjoy.
May this new year bring more n more joy to all.&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Fun at Nasscom GDC BYOG 2011!</title>
		<link href="http://kushagragour.in/blog/2011/11/fun-at-nasscom-gdc-byog/"/>
		<updated>2011-11-15T06:54:51+05:30</updated>
		<id>http://kushagragour.in/blog/2011/11/fun-at-nasscom-gdc-byog/</id>
		<content type="html">&lt;p&gt;Hey fellow developers!&lt;/p&gt;
&lt;p&gt;It has been a long time since I wrote my last post. Well, I have got a reason for this one :)&lt;/p&gt;
&lt;p&gt;Four days back, Nasscom organized its third &lt;strong&gt;&lt;a href=&quot;http://ngdc.nasscom.in/&quot;&gt;Game Developers Conference&lt;/a&gt;&lt;/strong&gt; in Pune. What was different this time was the BYOG event conducted by the Indie Game Development India community. Yes, you heard that right a &lt;strong&gt;&lt;a href=&quot;http://ingd.in/byog/nasscom-2011&quot;&gt;Build Your Own Game&lt;/a&gt;&lt;/strong&gt; wherein a game was to be developed in 48 hours...savvy!&lt;/p&gt;
&lt;p&gt;Unfortunately, I could not attend the awesome event this year. Nevertheless, I took part in the BYOG remotely. And what I came up with in this jam was &lt;strong&gt;&lt;a href=&quot;http://ingd.in/project/fun-forces&quot;&gt;Fun With Force&lt;/a&gt;&lt;/strong&gt;. The theme of my game was &#39;physics&#39;. Its a very simple prototype but I&#39;m happy with the result. And yes...it won the 3rd prize in the jam :D&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/games/fun-with-force/&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/fun_with_force.png&quot; alt=&quot;Fun with force&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/games/fun-with-force/&quot; target=&quot;_blank&quot; class=&quot;button button-big&quot;&gt;Play&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let the developer (me) know your comments and suggestions.&lt;/p&gt;
&lt;p&gt;More updates on my games coming soon.
&lt;strong&gt;Cheers!&lt;/strong&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>AS3 Motion Tracker on github</title>
		<link href="http://kushagragour.in/blog/2011/06/as3-motion-tracker-on-github/"/>
		<updated>2011-06-14T00:07:47+05:30</updated>
		<id>http://kushagragour.in/blog/2011/06/as3-motion-tracker-on-github/</id>
		<content type="html">&lt;p&gt;Hiya everyone !&lt;/p&gt;
&lt;p&gt;I have been working on motion tracking since my &lt;a href=&quot;http://kushagragour.in/blog/2011/06/a-supercool-night-with-motion-tracking/&quot;&gt;last blog post&lt;/a&gt; on experiment with Justin Windle&#39;s motion tracker. Inspired by all the fascinating stuff, I started writing my own motion tracker in Actionscript 3.0 which is finally done and up on &lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Though it tracks motion nicely it still needs to be improved to track smoothly and more accurately. I&#39;ll be also working on integrating gesture recognition with it.&lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/chinchang/AS3-Motion-Tracker&quot;&gt;PROJECT SOURCE&lt;/a&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Download it. Play with it. Improve it.&lt;/p&gt;
&lt;p&gt;Cheers !&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>A supercool night with MOTION TRACKING</title>
		<link href="http://kushagragour.in/blog/2011/06/a-supercool-night-with-motion-tracking/"/>
		<updated>2011-06-04T14:39:13+05:30</updated>
		<id>http://kushagragour.in/blog/2011/06/a-supercool-night-with-motion-tracking/</id>
		<content type="html">&lt;p&gt;Hellooo everyone !&lt;/p&gt;
&lt;p&gt;Last night while surfing on the web and reading flash stuff I came across &lt;a href=&quot;http://blog.soulwire.co.uk/&quot;&gt;&lt;strong&gt;Justin Windle&#39;s blog&lt;/strong&gt;&lt;/a&gt;. He has done such awesome flash work...was really amazed to see it. And one of them is his motion tracking API. As soon as I read about it and saw the demo, I could not stop myself and immediately downloaded it to explore more. I made a small game out of it. This is what I came up with :&lt;/p&gt;
&lt;object data=&quot;http://kushagragour.in/uploads/2011/motionpong.swf&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;530&quot; height=&quot;300&quot;&gt;
&lt;/object&gt;
&lt;p&gt;&lt;strong&gt;(Move your hand left-right to move the platform.)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The motion tracking algorithm is itself very basic but gives amazing results with little tweaking. One restriction though, you should have only one object moving on the screen (hand, head etc) to properly get it tracked to play the game. More about the API &lt;strong&gt;&lt;a href=&quot;http://blog.soulwire.co.uk/code/actionscript-3/webcam-motion-detection-tracking&quot;&gt;can be read here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Its actually really cool to make your very own motion sensing game and play it :) I am surely going to explore it more and develop some good stuff with it, soon.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/uploads/2011/motion_pong.rar&quot; target=&quot;_blank&quot; class=&quot;button button-big&quot;&gt;Download Source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cheers&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>[Creating a LAN] Wireless LAN using ad-hoc network</title>
		<link href="http://kushagragour.in/blog/2011/05/creating-a-lan-wireless-lan-using-ad-hoc-network/"/>
		<updated>2011-05-28T06:51:59+05:30</updated>
		<id>http://kushagragour.in/blog/2011/05/creating-a-lan-wireless-lan-using-ad-hoc-network/</id>
		<content type="html">&lt;p&gt;This is the second part of the &lt;strong&gt;CREATING A LAN series - Wireless LAN&lt;/strong&gt;.
You can read the tutorial on Wired LAN &lt;a href=&quot;http://kushagragour.in/blog/2011/05/creating-a-lan-wired-lan-using-crossover-cable/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Windows 7 gives you an option to form a wireless ad-hoc network without much configuration in few minutes.
Now some real stuff.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Requirements for this tutorial :&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Upto 9 Computer machines having wifi.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows 7 OS (Windows Vista will also work)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(&lt;strong&gt;NOTE&lt;/strong&gt; : The tutorial visuals shown here are of Win 7, though it would work just fine on Windows Vista also.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;STEP 1 :&lt;/strong&gt;
On any one machine (which you want to create the network on), open the control Panel and go over to &lt;strong&gt;View network status and tasks&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/images/wlan_1.png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/wlan_1-300x208.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;STEP 2 :&lt;/strong&gt;
Now click on &lt;strong&gt;Set up a new connection or network&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/images/wlan_2.png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/wlan_2-300x139.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;STEP 3 :&lt;/strong&gt;
From the available options, select &lt;strong&gt;Set up a wireless ad hoc (computer-to-computer) network&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/images/wlan_3.png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/wlan_3-300x189.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;STEP 4 :&lt;/strong&gt;
Now you need to enter a &lt;strong&gt;Network name&lt;/strong&gt; and a &lt;strong&gt;Security key&lt;/strong&gt; for the new network. Anything of your choice.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/images/wlan_4.png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/wlan_4-300x209.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thats all you need to do to create a wireless network. Now its time to start it up and let others join.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;STEP 5 :&lt;/strong&gt;
(&lt;strong&gt;NOTE&lt;/strong&gt; : Make sure WIFI on the machine is turned on before this step.)&lt;/p&gt;
&lt;p&gt;On the same machine, click the network icon in the system tray. You will see the network name you just created in the list.
Click it to connect to it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/images/wlan_5.png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/wlan_5-255x300.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On succesfull connection, you would see &lt;strong&gt;Waiting for users&lt;/strong&gt; instead of Connect button.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/images/wlan_6.png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/wlan_6-284x300.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;STEP 6 :&lt;/strong&gt;
Now move on to other machines which you want to add to the network. Switch on their WIFI. Click on the network icon in the system tray and find the network we created in the previous step (&lt;strong&gt;test&lt;/strong&gt; in our case). Click it and connect. It will ask for the security key which
is the same as we entered while creating the network.&lt;/p&gt;
&lt;p&gt;If all goes well, you will now be connected to the network successfully.&lt;/p&gt;
&lt;p&gt;Now you can enjoy your favourite lan games with more than 2 machines connected wirelessly.&lt;/p&gt;
&lt;p&gt;Have fun.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>[Creating a LAN] Wired LAN using crossover cable</title>
		<link href="http://kushagragour.in/blog/2011/05/creating-a-lan-wired-lan-using-crossover-cable/"/>
		<updated>2011-05-19T05:19:05+05:30</updated>
		<id>http://kushagragour.in/blog/2011/05/creating-a-lan-wired-lan-using-crossover-cable/</id>
		<content type="html">&lt;p&gt;Ever wanted to connect your PCs to form a LAN and play your favourite multiplayer game ?If you got stuck creating a LAN, then this tutorial will guide you through. So all you have to do is just follow the steps and you&#39;ll be on a LAN in no time.&lt;/p&gt;
&lt;p&gt;The tutorial is in 2 parts : &lt;strong&gt;&lt;a href=&quot;http://kushagragour.in/blog/2011/05/creating-a-lan-wired-lan-using-crossover-cable/&quot;&gt;WIRED&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;WIRELESS&lt;/strong&gt;.
This one will show how to create a wired LAN using just a crossover cable.&lt;/p&gt;
&lt;p&gt;So lets get going !&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Requirements for this tutorial :&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2 Computer machines having lan card.&lt;/li&gt;
&lt;li&gt;1 &lt;a href=&quot;http://en.wikipedia.org/wiki/Ethernet_crossover_cable&quot;&gt;Crossover cable&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(&lt;strong&gt;NOTE&lt;/strong&gt; : The visuals shown here are of Win 7, though it would work just fine on any Windows.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;STEP 1 :&lt;/strong&gt;
Connect the 2 machines with the crossover cable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;STEP 2 :&lt;/strong&gt;
On first machine, Open the control Panel and go over to &lt;strong&gt;View network status and tasks&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/images/lan_1-300x208.png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/lan_1-300x208.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;STEP 3 :&lt;/strong&gt;
Now click on &lt;strong&gt;Change adapter settings&lt;/strong&gt; in the left panel.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/images/lan_2-300x202.png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/lan_2-300x202.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;STEP 4 :&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Select the &lt;strong&gt;Local Area Connection&lt;/strong&gt; adapter, right-click on it and select &lt;strong&gt;Properties&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/images/lan_3.png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/lan_3-300x198.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;STEP 5 :&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now we need to edit some IPv4 properties of the connection. Click on &lt;strong&gt;Properties&lt;/strong&gt; with &lt;strong&gt;Internet Protocol Version 4 (TCP/IPv4)&lt;/strong&gt; selected in the list.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/images/lan_4.png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/lan_4-300x219.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;STEP 6 :&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Change the IP addresses to those shown in the picture below and click &lt;strong&gt;OK&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/images/lan_5.png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/lan_5-300x229.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;STEP 7 :&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Follow the same steps on the second machine and change its IP addresses as shown in the picture.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/images/lan_6.png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/lan_6-300x249.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is it ! Your both machines are now connected in a LAN.&lt;/p&gt;
&lt;p&gt;You can also set some additional sharing options. For that:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;STEP 8 :&lt;/strong&gt;
Click on &lt;strong&gt;Change advanced sharing options&lt;/strong&gt; in the &lt;strong&gt;Network and Sharing Center&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kushagragour.in/images/lan_7.png&quot;&gt;&lt;img src=&quot;http://kushagragour.in/images/lan_7-300x227.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here you can find several sharing options which you can set according to your preferences.&lt;/p&gt;
&lt;p&gt;One disadvantage of using a crossover cable to form a LAN is that only 2 machines can be connected together. If you want to go over 2, you will need a switch.&lt;/p&gt;
&lt;p&gt;In next tutorial, I shall demonstrate how to form a wireless ad-hoc network using wi-fi which enables more than 2 machines to be connected.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stay tuned :)&lt;/strong&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Caricature 3: Hasta la vista, baby !</title>
		<link href="http://kushagragour.in/blog/2011/05/caricature-1-hasta-la-vista-baby/"/>
		<updated>2011-05-17T20:58:08+05:30</updated>
		<id>http://kushagragour.in/blog/2011/05/caricature-1-hasta-la-vista-baby/</id>
		<content type="html">&lt;p&gt;One more...&lt;/p&gt;
&lt;img src=&quot;http://kushagragour.in/images/arnoldyy.png&quot; alt=&quot;Arnold&quot; title=&quot;terminator&quot;&gt;
&lt;p&gt;(Made in Flash Professional)&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Caricature 2 - Pride of India</title>
		<link href="http://kushagragour.in/blog/2011/05/caricature-2-pride-of-india/"/>
		<updated>2011-05-17T20:28:07+05:30</updated>
		<id>http://kushagragour.in/blog/2011/05/caricature-2-pride-of-india/</id>
		<content type="html">&lt;p&gt;Helos all !&lt;/p&gt;
&lt;p&gt;Here is one more caricature of a person who has made India proud.&lt;/p&gt;
&lt;img src=&quot;http://kushagragour.in/images/amitabh1.png&quot; alt=&quot;Amitabh Bachchan&quot; title=&quot;Hainnnnnnnnnnn!&quot;&gt;
&lt;p&gt;&lt;strong&gt;Who is he ?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(Made in Flash Professional)&lt;/p&gt;
</content>
	</entry>
</feed>